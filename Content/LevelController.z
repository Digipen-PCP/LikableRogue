class LevelController : ZilchComponent
{
    // Initialize properties
    [Property]
    var RoomHeight : Integer    = 15;
    [Property]
    var RoomWidth : Integer     = 21;
    [Property]
    var OuterWallTile : Archetype = null;
    [Property]
    var PlayerCharacter : Archetype = null;
    [Property]
    var BackgroundImage : Archetype = null;
    
    // Create an empty object to initialize the camera into
    var LevelCamera : Cog = null;
    
    // Create a random number generator for generating random numbers
    var RandomGenerator : Random = Random();
    
    function Initialize(init : CogInitializer)
    {
        // initialize the camera object
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        // Don't need physics update just yet
        //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        // create the tiles in the board
        this.BoardSetup();
        // spawn the player 
        this.SpawnPlayer();
    }

    /*
    function OnLogicUpdate(event : UpdateEvent)
    {
    }
    */
    /*function Camera()
    {
        this.Space.FindObjectByName("Camera").Transform.Translation = Real3(,,40);
    }*/
    
    function BoardSetup () {
        /* 
        In order to generate multiple rooms:
        - create "origin" room
        - create rooms around it 
        - make sure all rooms touch at least one other room 
        */
        
        this.GenerateRoom(0, 0);
        
        // move camera to center on current level
        var cameraXAvg : Integer = ( (-1 + (this.RoomWidth +1))/2 );
        var cameraYAvg : Integer = ( (-1 + (this.RoomHeight +1))/2 );
        this.LevelCamera.Transform.Translation = Real3(cameraXAvg, cameraYAvg, 40);
        
        // create background, size it to fit level
        var roomCenter = Real3 (cameraXAvg, cameraYAvg, 0);
        var bgImg = this.Space.CreateAtPosition(this.BackgroundImage, roomCenter);
        var roomSize = Real3(this.RoomWidth + 2, this.RoomHeight + 2, 0);
        bgImg.Transform.Scale = roomSize;
    }
    
    function GenerateRoom ( originX : Integer,  // x coordinate of first inhabitable square
                            originY : Integer) {//,  // Y coordinate of the first inhabitable square
                            //exits : Integer,    // how many exits (1-4) the room has
                            //nExit : Boolean,    // north exit?
                            //sExit : Boolean,    // south exit?
                            //eExit : Boolean,    // east exit?
                            //wExit : Boolean) {  // west exit?
        for (var x = (originX - 1); x < (originX + this.RoomWidth + 1); ++x) {      // Loop through every column of the room
            for (var y = (originY - 1); y < (originY + this.RoomHeight + 1); ++y) { // loop through every row of the room
                // check to see if we're on the outside edge of the room
                if (x == (originX - 1) || x == (originX + this.RoomWidth) || y == (originY - 1) || y == (originY + this.RoomHeight)) { 
                    // create a real3 with the exact outer coordinates to pass to CreateAtPosition
                    var outerWallPosition = Real3(x, y, 0); 
                    // create a wall tile at the edge of the room
                    var newOuterWall = this.Space.CreateAtPosition(this.OuterWallTile, outerWallPosition);
                }
            }
        }
    }
    
    function SpawnPlayer () {
        // create values spawnX and spawnY
        // these values are randomly generated based on room height/width and cast to integers
        var spawnX : Integer = (this.RandomGenerator.Range(0, this.RoomWidth)) as Integer;
        var spawnY : Integer = (this.RandomGenerator.Range(0, this.RoomHeight)) as Integer;
        // use these random points to create a real3 that we'll spawn the player at
        var spawnPoint : Real3 = Real3(spawnX, spawnY, 0);
        
        // now the magic happens - spawn the player at the spawnpoint
        var player = this.Space.CreateAtPosition(this.PlayerCharacter, spawnPoint);
    }
}
