/* TODO: 
 *       - create room sets with properties
 *          - i.e. "difficulty," etc.
 *       - implement generator that uses sets of rooms,
 *          individual rooms.
 *       - create interior objects, write generation code 
*/

class LevelController : ZilchComponent
{
    /// We gotta have a player, man!
    [Property]
    var PlayerCharacter : Archetype = null;
    
    /// an integer that tells us the current difficulty
    // 0 = intro (tutorial) level
    // 1 = easy
    // 2 = medium
    // 3 = hard
    [Property]
    // TODO: create introductory level, change this to zero.
    // TODO: Implement difficulty changes when the level changes.
    var LevelDifficulty : Integer = 1;
    
    /// Dynamic difficulty changes as the player interacts with the world
    // TODO: Write code to increment / decrement this value as the player
    //       lives, dies, gets pickups, clears rooms, etc.
    [Property]
    var DynamicDifficulty : Integer = 1;
    
    /// Room height and width is used for 
    /// initial placement of the camera and player
    [Property]
    var RoomHeight : Integer = 15;
    [Property]
    var RoomWidth : Integer  = 21;
    
    /// Here we'll create some objects for the type of level we want
    // Intial level
    /*[Property]
    var IntroLevel : Archetype = null;*/
    
    // Easy difficulty Levels
    [Property]
    var EasyLevel01 : Archetype = null;
    [Property]
    var EasyLevel02 : Archetype = null;
    
    // Medium difficulty levels
    [Property]
    var MediumLevel01 : Archetype = null;
    [Property]
    var MediumLevel02 : Archetype = null;
    
    // Hard levels
    [Property]
    var HardLevel01 : Archetype = null;
    [Property]
    var HardLevel02 : Archetype = null;
    
    // TODO: implement bossrush levels? Ask luke.
    
    // Arrays to store the various level types in
    var EasyLevels : Array[Archetype]   = Array[Archetype]();
    var MediumLevels : Array[Archetype] = Array[Archetype]();
    var HardLevels : Array[Archetype]   = Array[Archetype]();
    
    // Create an empty object to initialize the camera into
    var LevelCamera : Cog = null;
    
    // Create a random number generator for generating random numbers
    var RandomGenerator : Random = Random();
    
    function Initialize(init : CogInitializer)
    {
        /// We'll need to add the various levels to arrays
        /// so that we can create them based off of how 
        /// difficult we want the player's experience to be.
        this.EasyLevels.Add( this.EasyLevel01 );
        // TODO: add more here once we have more levels
        
        // initialize the camera object
        // we position it where we want it later
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        
        /// ChooseAndCreateLevel() spawns in the basic world geometry
        this.ChooseAndCreateLevel( this.LevelDifficulty );
        /// BoradSetup() creates the level, positions the camera
        this.BoardSetup();
        /// SpawnPlayer() spawns the player at a set location relative to the world.
        this.SpawnPlayer(10, 7);
    }
    
    /// ChooseAndCreateLevel: takes integer "difficulty," 
    ///     spawns a level based on its value (0-3)
    function ChooseAndCreateLevel( difficulty : Integer ) {
        if ( difficulty >= 0 && difficulty <= 3 ) {
            if ( difficulty == 0 ) {
                return;
            }
            else if ( difficulty == 1 ) {
                var randomIndex : Integer = 
                    this.RandomGenerator.Range(0, this.EasyLevels.Count) as Integer;
                this.Space.CreateAtPosition( this.EasyLevels.Get(randomIndex), Real3(0, 0, 0) );
            }
            else if ( difficulty == 2 ) {
                var randomIndex : Integer = 
                    this.RandomGenerator.Range(0, this.MediumLevels.Count) as Integer;
                this.Space.CreateAtPosition( this.MediumLevels.Get(randomIndex), Real3(0, 0, 0) );
            }
            else if ( difficulty == 3 ) {
                var randomIndex : Integer = 
                    this.RandomGenerator.Range(0, this.HardLevels.Count) as Integer;
                this.Space.CreateAtPosition( this.HardLevels.Get(randomIndex), Real3(0, 0, 0) );
            }
        }
        
        else {
            Console.WriteLine( "ERROR in ChooseAndCreateLevel(): Got `difficulty`, but expected a value between 0 and 3." );
        }
    }
    
    /// BoardSetup: takes no arguments, returns void
    function BoardSetup () {
        // move camera to center on current level
        var cameraXAvg : Integer = ( ( -1 + (this.RoomWidth + 1) ) / 2 );
        var cameraYAvg : Integer = ( ( -1 + (this.RoomHeight +1) ) / 2 );
        this.LevelCamera.Transform.Translation = Real3(cameraXAvg, cameraYAvg, 40);
    }
    
    /// SpawnPlayer: takes two integers that will be used
    ///    as X and Y coordinates relative to the world when
    ///    the player is spawned.
    function SpawnPlayer (spawnX : Integer, spawnY : Integer) {
        // use these random points to create a real3 that we'll spawn the player at
        var spawnPoint : Real3 = Real3(spawnX, spawnY, 0);
        
        // now the magic happens - spawn the player at the spawnpoint
        var player = this.Space.CreateAtPosition(this.PlayerCharacter, spawnPoint);
        player.Transform.Translation = spawnPoint;
    }
}

