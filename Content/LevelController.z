/* TODO: 
 *       - create interior objects, write generation code 
*/

class LevelController : ZilchComponent
{
    
    var StairArowCog : Cog = null;
    /// We gotta have a player, man!
    [Property]
    var PlayerCharacter : Archetype = null;
    
    /// In order to display text before / inbetween levels, we need the archetype
    [Property]
    var FlavorText : Archetype = null;
    
    /// an integer that tells us the current difficulty
    // 0 = intro (tutorial) level
    // 1 = easy
    // 2 = medium
    // 3 = hard
    [Property]
    // TODO: create introductory level, change this to zero.
    var LevelDifficulty : Integer = 1;
    
    /// Dynamic difficulty changes as the player interacts with the world
    [Property]
    var DynamicDifficulty : Real = 1;
    
    /// Here we'll create some objects for the type of level we want
    // Intial level
    /*[Property]
    var IntroLevel : Archetype = null;*/
    
    // Easy difficulty Levels
    [Property]
    var EasyLevel01 : Archetype = null;
    
    // Special tiles
    [Property]
    var LevelExit : Archetype = null;
    
    // Modifier for loot rooms
    [Property]
    var LootRoomModifier : Integer = 2;
    // TODO: implement bossrush levels? Ask luke.
    
    // Arrays to store the various level types in
    var EasyLevels : Array[Archetype]   = Array[Archetype]();
    var MediumLevels : Array[Archetype] = Array[Archetype]();
    var HardLevels : Array[Archetype]   = Array[Archetype]();
    
    // Create an empty object to initialize the camera into
    var LevelCamera : Cog = null;
    
    // this variable will store the level we generate
    // we'll use this after we set up the board
    var CurrentLevel : Cog = null;
    
    var LevelsBeaten : Integer = 1;
    
    // so we can destroy him on level change
    var PlayerCog : Cog = null;
    
    // Create a random number generator for generating random numbers
    var RandomGenerator : Random = Random();
    
    function Initialize(init : CogInitializer)
    {
        this.StairArowCog = this.Space.FindObjectByName("StairArow");
        /// We'll need to add the various levels to arrays
        /// so that we can create them based off of how 
        /// difficult we want the player's experience to be.
        this.EasyLevels.Add( this.EasyLevel01 );
        
        // initialize the camera object
        // we position it where we want it later
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        
        /// ChooseAndCreateLevel() spawns in the basic world geometry
        this.ChooseAndCreateLevel( this.LevelDifficulty );
        
        /// SpawnPlayer() spawns the player at a set location relative to the world.
        this.SpawnPlayer( this.CurrentLevel );
        
        /// SpawnEnemiesAndPickUps() creates the enemies and pickups based off of
        /// relative distance to the player's starting location
        this.SpawnPickupsAndExits();
        
        this.CreateFlavorText( "You are now on floor 1." );
        
        // connect to physicsupdate (we only use this to cap dynamicdifficulty)
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    /// SpawnNewLevel
    /// Does the same thing as the Init function, but for level changes
    function SpawnNewLevel () {
        
        /// take care of existing stuff - delete objects
        // first, get rid of every enemy
        var enemyList : CogNameRange = this.Space.FindAllObjectsByName( "Enemy" );
        foreach ( var enemy in enemyList )
        {
            enemy.Destroy();
        }
        
        // destroy the current level to make way for a new one
        /// WARNING: THE FOLLOWING LINE OF CODE CONSTITUES WITCHCRAFT
        /// I DON'T KNOW HOW IT WORKS, SO DON'T ASK ME.
        this.CurrentLevel.Destroy();
        
        // finally, spawn in all the new stuff
        this.ChooseAndCreateLevel( this.LevelDifficulty );
        
        this.SpawnPickupsAndExits();
        
        this.SpawnPlayer( this.CurrentLevel );
        
        if ( this.LevelsBeaten != 2 )
        {
            this.CreateFlavorText( "You are now on floor `this.LevelsBeaten + 1`." );
        }
        else
        {
            this.CreateFlavorText( "You are now on floor `this.LevelsBeaten + 1`.    \n\nThere would have been an endgame condition here or something, but we ran out of time lol." );
        }
        
        this.StairArowCog.Sprite.Visible = false;
        this.StairArowCog.StairArowControler.StarsFound = false;
        
        ++this.LevelsBeaten;
    }
    
    // create the flavor text and display it
    function CreateFlavorText ( textToDisplay : String )
    {
        var player = this.Space.FindObjectByName( "Player" );
        player.PlayerController.IsPlayerInDialog = true;
        
        var flavorText = this.Space.CreateAtPosition( this.FlavorText, Real3(this.LevelCamera.Transform.Translation.X, 
                                                                             this.LevelCamera.Transform.Translation.Y, 
                                                                             this.LevelCamera.Transform.Translation.Z - 5) );
        
        var flavorTextText : Cog = flavorText.FindChildByName( "FlavorTextText" );
        flavorTextText.TextCrawlController.CrawlText( textToDisplay );
    }
    
    /// ChooseAndCreateLevel: takes integer "difficulty," 
    ///     spawns a level based on its value (0-3)
    function ChooseAndCreateLevel( difficulty : Integer ) 
    {
        if ( difficulty >= 0 && difficulty <= 3 ) 
        {
            if ( difficulty == 0 ) 
            {
                return;
            }
            else if ( difficulty == 1 ) 
            {
                var randomIndex : Integer = 
                    this.RandomGenerator.Range(0, this.EasyLevels.Count) as Integer;
                this.CurrentLevel = this.Space.CreateAtPosition( this.EasyLevels.Get(randomIndex), Real3(0, 0, 0) );
            }
            else if ( difficulty == 2 ) 
            {
                var randomIndex : Integer = 
                    this.RandomGenerator.Range(0, this.MediumLevels.Count) as Integer;
                this.CurrentLevel = this.Space.CreateAtPosition( this.MediumLevels.Get(randomIndex), Real3(0, 0, 0) );
            }
            else if ( difficulty == 3 ) 
            {
                var randomIndex : Integer = 
                    this.RandomGenerator.Range(0, this.HardLevels.Count) as Integer;
                this.CurrentLevel = this.Space.CreateAtPosition( this.HardLevels.Get(randomIndex), Real3(0, 0, 0) );
            }
        }
        
        else 
        {
            Console.WriteLine( "ERROR in ChooseAndCreateLevel(): Got `difficulty`, but expected a value between 0 and 3." );
        }
    }
    
    /// SpawnPlayer: takes two integers that will be used
    ///    as X and Y coordinates relative to the world when
    ///    the player is spawned.
    function SpawnPlayer ( level : Cog ) 
    {
        // create an array of points we can spawn the player at
        var possibleSpawnPoints : Array[Real3] = Array[Real3]()
            // this adds all the spawnpoints of the level
            // (we'll assume we have a max of 6)
            { level.LevelArchetypeController.PlayerSpawn01,
              level.LevelArchetypeController.PlayerSpawn02, 
              level.LevelArchetypeController.PlayerSpawn03, 
              level.LevelArchetypeController.PlayerSpawn04, 
              level.LevelArchetypeController.PlayerSpawn05, 
              level.LevelArchetypeController.PlayerSpawn06 };
              
        var actualSpawnPoints : Array[Real3] = Array[Real3]();
        
        /// now we use foreach to eliminate any invalid spawnpoints
        // any non-set spawnpoints will be (0, 0, 0)
        foreach ( var spawnPoint in possibleSpawnPoints ) 
        {
            if ( (spawnPoint.X != 0.0) && (spawnPoint.Y != 0.0) ) 
            {
                actualSpawnPoints.Add( spawnPoint );
            }
        }
        
        // get a random index of the spawn point array
        var randomIndex : Integer = this.RandomGenerator.Range(0, actualSpawnPoints.Count) as Integer;

        // set the player's new spawn point
        var spawnPoint : Real3 = actualSpawnPoints.Get( randomIndex );
        
        // before we spawn the player, make sure no enemies spawn in with him
        var listOfRooms : HierarchyListrange = this.CurrentLevel.Children;
        foreach( var room in listOfRooms ) 
        {
            if ( room.FindChildByName("Background") != null )
            {
                var background = room.FindChildByName( "Background" );
                var roomLocation : Real3 = background.Transform.WorldTranslation;
                
                // we only need the x and y difference, not Z
                var xDifference : Integer = Math.Abs( spawnPoint.X - roomLocation.X ) as Integer;
                var yDifference : Integer = Math.Abs( spawnPoint.Y - roomLocation.Y ) as Integer;
                
                if ( (xDifference == 0 as Integer) && (yDifference == 0 as Integer) )
                {
                    // designate spawn room
                    //background.Sprite.Color = Real4( 0, 128, 255, 1.0 );
                    background.Parent.RoomController.EnemiesDead    = true;
                    background.Parent.RoomController.EnemiesSpawned = true;
                }
            }
        }
        
        // spawn the player
        if ( this.PlayerCog == null ) {
            this.PlayerCog = this.Space.CreateAtPosition( this.PlayerCharacter, spawnPoint );
        }
        else
        {
            this.PlayerCog.Transform.Translation = spawnPoint;
        }
        
        // orient the camera to the player's location
        this.LevelCamera.Transform.Translation = Real3( spawnPoint.X, spawnPoint.Y, this.LevelCamera.Transform.Translation.Z );
    }
    
    function SpawnPickupsAndExits () 
    {
        return;
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        Math.Clamp( this.DynamicDifficulty, 0, 100 );
    }
}
