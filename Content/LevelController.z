/* TODO: rewrite random code generator to be based off of 
 *       array (top left to bottom right) rather than current 
 *       model (middle out)
*/

/*
    How will we determine stuff to do based off of the array?
    - create an array that is based off of the MaxWorldWidth 
      and Height properties 
    - start by putting a random room in a random space in this 
      array. this will be our "origin" room 
    - we'll then put a few rooms around this room, but 
      reference the location in the array, rather than the 
      room itself. 
    - we'll need a few checks for this 
    - 1) are we on the edge of the array? if so, which edge?
    - 2) if not, what rooms are we next to?
    - 3) depending on what rooms we're next to, what doors 
         we need to have?
*/

class LevelController : ZilchComponent
{
    // we'll need to modify the player at a later state
    [Property]
    var PlayerCharacter : Archetype = null;
    
    // room properties are used to position camera, player.
    [Property]
    var RoomHeight : Integer = 15;
    [Property]
    var RoomWidth : Integer  = 21;
    
    // instead of generating based off of max number of rooms,
    // we'll generate based off of the max size of an array.
    [Property]
    var MaxWorldHeight : Integer = 5;
    var MaxWorldWidth  : Integer = 5;
    
    // Create several empty archetypes for rooms
    /// ROOMS WITH  FOUR EXITS ///
    [Property]
    var FoRoomArchetype01 : Archetype = null;
    
    /// ROOMS WITH THREE EXITS ///
    [Property]
    var ThRoomArchetype01 : Archetype = null;
    [Property]
    var ThRoomArchetype02 : Archetype = null;
    [Property]
    var ThRoomArchetype03 : Archetype = null;
    [Property]
    var ThRoomArchetype04 : Archetype = null;
    
    ///  ROOMS WITH TWO EXITS  ///
    [Property]
    var TwRoomArchetype01 : Archetype = null;
    [Property]
    var TwRoomArchetype02 : Archetype = null;
    [Property]
    var TwRoomArchetype03 : Archetype = null;
    [Property]
    var TwRoomArchetype04 : Archetype = null;
    [Property]
    var TwRoomArchetype05 : Archetype = null;
    [Property]
    var TwRoomArchetype06 : Archetype = null;
    
    ///  ROOMS WITH  ONE EXIT  ///
    [Property]
    var OnRoomArchetype01 : Archetype = null;
    [Property]
    var OnRoomArchetype02 : Archetype = null;
    [Property]
    var OnRoomArchetype03 : Archetype = null;
    [Property]
    var OnRoomArchetype04 : Archetype = null;
    
    ///      SPECIAL ROOMS     ///
    //[Property]
    //var RoomArchetype04 : Archetype = null;
    
    /// ARRAY FOR ROOMS WITH FOUR EXITS ///
    var RoomsWithFourExits  : Array[Archetype] = Array[Archetype]();
    /// ARRAY FOR ROOMS WITH THREE EXITS ///
    var RoomsWithThreeExits : Array[Archetype] = Array[Archetype]();
    /// ARRAY FOR ROOMS WITH TWO EXITS ///
    var RoomsWithTwoExits   : Array[Archetype] = Array[Archetype]();
    /// ARRAY FOR ROOMS WITH ONE EXIT ///
    var RoomsWithOneExit    : Array[Archetype] = Array[Archetype]();
    /// ARRAY FOR SPECIAL ROOMS ///
    //var SpecialRooms : Array[Archetype]         = Array[Archetype]();
    
    // create an archetype for our origin room
    var OriginRoom : Cog = null;
    
    // this is the last room we generated 
    var LastRoomGenerated : Cog = null;
    
    // Create an empty object to initialize the camera into
    var LevelCamera : Cog = null;
    
    // Create a random number generator for generating random numbers
    var RandomGenerator : Random = Random();
    
    
    
    function Initialize(init : CogInitializer)
    {
        // initialize the camera object
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        
        /// add room archetypes to their repsective arrays
        /// I'll change this into a for loop later
        // Rooms with four exits
        this.RoomsWithFourExits.Add(this.FoRoomArchetype01);
        
        // rooms with three exits
        this.RoomsWithThreeExits.Add(this.ThRoomArchetype01);
        this.RoomsWithThreeExits.Add(this.ThRoomArchetype02);
        this.RoomsWithThreeExits.Add(this.ThRoomArchetype03);
        this.RoomsWithThreeExits.Add(this.ThRoomArchetype04);
        
        // rooms with two exits
        this.RoomsWithTwoExits.Add(this.TwRoomArchetype01);
        this.RoomsWithTwoExits.Add(this.TwRoomArchetype02);
        this.RoomsWithTwoExits.Add(this.TwRoomArchetype03);
        this.RoomsWithTwoExits.Add(this.TwRoomArchetype04);
        this.RoomsWithTwoExits.Add(this.TwRoomArchetype05);
        this.RoomsWithTwoExits.Add(this.TwRoomArchetype06);
        
        // create the tiles in the board
        this.BoardSetup();
        // spawn the player 
        this.SpawnPlayer(10, 7);
    }
    
    function BoardSetup () {
        
        // generate the initial room
        this.OriginRoom = this.GenerateRoom( 0, 0, this.RoomsWithFourExits[0] );
        this.LastRoomGenerated = this.OriginRoom;
        
        // generate the following rooms
        //this.GenerateManyRooms ();
        
        // move camera to center on current level
        var cameraXAvg : Integer = ( ( -1 + (this.RoomWidth + 1) ) / 2 );
        var cameraYAvg : Integer = ( ( -1 + (this.RoomHeight +1) ) / 2 );
        this.LevelCamera.Transform.Translation = Real3(cameraXAvg, cameraYAvg, 40);
    }
    
    function GenerateRoom ( originX : Integer,    // x coordinate of first inhabitable square
                            originY : Integer,    // Y coordinate of the first inhabitable square
                            typeOfRoomToCreate : Archetype  // should we create a room with 4 exits, 3, etc
                          ) : Cog                 // the type of thing we return  
    {
        // create a real3 to be the origin of the room
        var newRoomPosition = Real3(originX, originY, 0);
        // instantiate a room 
        var newlyCreatedRoom = this.Space.CreateAtPosition(typeOfRoomToCreate, newRoomPosition);
        
        return newlyCreatedRoom;
    }
    
    function SpawnPlayer (spawnX : Integer, spawnY : Integer) {
        // use these random points to create a real3 that we'll spawn the player at
        var spawnPoint : Real3 = Real3(spawnX, spawnY, 0);
        
        // now the magic happens - spawn the player at the spawnpoint
        var player = this.Space.CreateAtPosition(this.PlayerCharacter, spawnPoint);
        player.Transform.Translation = spawnPoint;
    }
}
