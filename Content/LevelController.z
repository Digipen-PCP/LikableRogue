/* TODO: 
 *       - create interior objects, write generation code 
*/

class LevelController : ZilchComponent
{
    /// We gotta have a player, man!
    [Property]
    var PlayerCharacter : Archetype = null;
    
    /// an integer that tells us the current difficulty
    // 0 = intro (tutorial) level
    // 1 = easy
    // 2 = medium
    // 3 = hard
    [Property]
    // TODO: create introductory level, change this to zero.
    // TODO: Implement difficulty changes when the level changes.
    var LevelDifficulty : Integer = 1;
    
    /// Dynamic difficulty changes as the player interacts with the world
    // TODO: Write code to increment / decrement this value as the player
    //       lives, dies, gets pickups, clears rooms, etc.
    [Property]
    var DynamicDifficulty : Real = 1;
    
    /// Here we'll create some objects for the type of level we want
    // Intial level
    /*[Property]
    var IntroLevel : Archetype = null;*/
    
    // Easy difficulty Levels
    [Property]
    var EasyLevel01 : Archetype = null;
    [Property]
    var EasyLevel02 : Archetype = null;
    
    // Medium difficulty levels
    [Property]
    var MediumLevel01 : Archetype = null;
    [Property]
    var MediumLevel02 : Archetype = null;
    
    // Hard levels
    [Property]
    var HardLevel01 : Archetype = null;
    [Property]
    var HardLevel02 : Archetype = null;
    
    // Special tiles
    [Property]
    var LevelExit : Archetype = null;
    
    // Modifier for loot rooms
    [Property]
    var LootRoomModifier : Integer = 2;
    // TODO: implement bossrush levels? Ask luke.
    
    // Arrays to store the various level types in
    var EasyLevels : Array[Archetype]   = Array[Archetype]();
    var MediumLevels : Array[Archetype] = Array[Archetype]();
    var HardLevels : Array[Archetype]   = Array[Archetype]();
    
    // Create an empty object to initialize the camera into
    var LevelCamera : Cog = null;
    
    // this variable will store the level we generate
    // we'll use this after we set up the board
    var CurrentLevel : Cog = null;
    
    // so we can destroy him on level change
    var PlayerCog : Cog = null;
    
    // CogNameRange of all backgrounds in the level
    // will be populated in Initialize
    var ListOfBackgrounds : CogNameRange = null;
    
    // Create a random number generator for generating random numbers
    var RandomGenerator : Random = Random();
    
    function Initialize(init : CogInitializer)
    {
        // TODO: make this dynamically change
        //this.DynamicDifficulty = 2.5;
        
        /// We'll need to add the various levels to arrays
        /// so that we can create them based off of how 
        /// difficult we want the player's experience to be.
        this.EasyLevels.Add( this.EasyLevel01 );
        //this.EasyLevels.Add( this.EasyLevel02 );
        this.MediumLevels.Add( this.MediumLevel01 );
        //this.MediumLevels.Add( this.MediumLevel02 );
        this.HardLevels.Add( this.HardLevel01 );
        //this.HardLevels.Add( this.HardLevel02 );
        // TODO: add more here once we have more levels
        
        // initialize the camera object
        // we position it where we want it later
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        
        /// ChooseAndCreateLevel() spawns in the basic world geometry
        this.ChooseAndCreateLevel( this.LevelDifficulty );
        
        // add each background into ListOfBackgrounds
        // we use this later to determine room positions
        this.ListOfBackgrounds = this.Space.FindAllObjectsByName( "Background" );
        
        /// SpawnPlayer() spawns the player at a set location relative to the world.
        this.SpawnPlayer( this.CurrentLevel );
        
        /// SpawnEnemiesAndPickUps() creates the enemies and pickups based off of
        /// relative distance to the player's starting location
        this.SpawnPickupsAndExits( this.Space.FindAllObjectsByName("Background") );
        
        // connect to physicsupdate (we only use this to cap dynamicdifficulty)
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    /// SpawnNewLevel
    /// Does the same thing as the Init function, but for level changes
    function SpawnNewLevel () {
        Console.WriteLine( "\nRoomController: SpawnNewLevel(); Choosing and creating levels." );
        this.ChooseAndCreateLevel( this.LevelDifficulty );
        Console.WriteLine( "\nRoomController: SpawnNewLevel(); Spawning pickups and exits." );
        this.SpawnPickupsAndExits( this.Space.FindAllObjectsByName("Background") );
        Console.WriteLine( "\nRoomController: SpawnNewLevel(); Spawning the player." );
        this.SpawnPlayer( this.CurrentLevel );
        Console.WriteLine( "\nRoomController: SpawnNewLevel(); Done.\n" );
    }
    
    /// ChooseAndCreateLevel: takes integer "difficulty," 
    ///     spawns a level based on its value (0-3)
    function ChooseAndCreateLevel( difficulty : Integer ) 
    {
        if ( difficulty >= 0 && difficulty <= 3 ) 
        {
            if ( difficulty == 0 ) 
            {
                return;
            }
            else if ( difficulty == 1 ) 
            {
                var randomIndex : Integer = 
                    this.RandomGenerator.Range(0, this.EasyLevels.Count) as Integer;
                Console.WriteLine( "ChooseAndCreateLevel(): \tSpawing room `this.EasyLevels.Get(randomIndex)`" );
                this.CurrentLevel = this.Space.CreateAtPosition( this.EasyLevels.Get(randomIndex), Real3(0, 0, 0) );
            }
            else if ( difficulty == 2 ) 
            {
                var randomIndex : Integer = 
                    this.RandomGenerator.Range(0, this.MediumLevels.Count) as Integer;
                Console.WriteLine( "ChooseAndCreateLevel(): \tSpawing room `this.MediumLevels.Get(randomIndex)`" );
                this.CurrentLevel = this.Space.CreateAtPosition( this.MediumLevels.Get(randomIndex), Real3(0, 0, 0) );
            }
            else if ( difficulty == 3 ) 
            {
                var randomIndex : Integer = 
                    this.RandomGenerator.Range(0, this.HardLevels.Count) as Integer;
                Console.WriteLine( "ChooseAndCreateLevel(): \tSpawing room `this.HardLevels.Get(randomIndex)`" );
                this.CurrentLevel = this.Space.CreateAtPosition( this.HardLevels.Get(randomIndex), Real3(0, 0, 0) );
            }
        }
        
        else 
        {
            Console.WriteLine( "ERROR in ChooseAndCreateLevel(): Got `difficulty`, but expected a value between 0 and 3." );
        }
    }
    
    /// SpawnPlayer: takes two integers that will be used
    ///    as X and Y coordinates relative to the world when
    ///    the player is spawned.
    function SpawnPlayer ( level : Cog ) 
    {
        // create an array of points we can spawn the player at
        var possibleSpawnPoints : Array[Real3] = Array[Real3]()
            // this adds all the spawnpoints of the level
            // (we'll assume we have a max of 6)
            { level.LevelArchetypeController.PlayerSpawn01,
              level.LevelArchetypeController.PlayerSpawn02, 
              level.LevelArchetypeController.PlayerSpawn03, 
              level.LevelArchetypeController.PlayerSpawn04, 
              level.LevelArchetypeController.PlayerSpawn05, 
              level.LevelArchetypeController.PlayerSpawn06 };
              
        var actualSpawnPoints : Array[Real3] = Array[Real3]();
        
        /// now we use foreach to eliminate any invalid spawnpoints
        // any non-set spawnpoints will be (0, 0, 0)
        foreach ( var spawnPoint in possibleSpawnPoints ) 
        {
            if ( (spawnPoint.X != 0.0) && (spawnPoint.Y != 0.0) ) 
            {
                Console.WriteLine( "SpawnPlayer(): \t\t\t\tFound possible spawn point at: `spawnPoint`" ); // debugging
                actualSpawnPoints.Add( spawnPoint );
            }
        }
        
        // get a random index of the spawn point array
        var randomIndex : Integer = this.RandomGenerator.Range(0, actualSpawnPoints.Count) as Integer;
        //Console.WriteLine("`randomIndex` of pspwnpts is \t`actualSpawnPoints.Get(randomIndex)`");
        // set the player's new spawn point
        var spawnPoint : Real3 = actualSpawnPoints.Get( randomIndex );
        Console.WriteLine( "SpawnPlayer(): \t\t\t\tChose spawnpoint `spawnPoint`\n" ); // debugging
        
        // before we spawn the player, make sure no enemies spawn in with him
        foreach( var background in this.ListOfBackgrounds ) 
        {
            var roomLocation : Real3 = background.Transform.WorldTranslation;
            
            Console.WriteLine( "SpawnPlayer(): \t\t\t\tProcessing room at `roomLocation`" ); // debugging
            
            // we only need the x and y difference, not Z
            var xDifference : Integer = Math.Abs( spawnPoint.X - roomLocation.X ) as Integer;
            var yDifference : Integer = Math.Abs( spawnPoint.Y - roomLocation.Y ) as Integer;
            
            if ( (xDifference == 0 as Integer) && (yDifference == 0 as Integer) )
            {
                // designate spawn room
                Console.WriteLine( "SpawnPlayer():* \t\t\tDesignated room at `background.Transform.WorldTranslation` as spawn/safe room." ); // debugging
                background.Sprite.Color = Real4( 0, 128, 255, 1.0 );
                background.Parent.RoomController.EnemiesDead    = true;
                background.Parent.RoomController.EnemiesSpawned = true;
            }
        }
        
        // spawn the player
        if ( this.PlayerCog == null ) {
            Console.WriteLine( "SpawnPlayer(): \t\t\t\tCreating player cog at `spawnPoint`." );
            this.PlayerCog = this.Space.CreateAtPosition( this.PlayerCharacter, spawnPoint );
        }
        else
        {
            Console.WriteLine( "SpawnPlayer(): \t\t\t\tMoving player cog to `spawnPoint`." );
            this.PlayerCog.Transform.Translation = spawnPoint;
        }
        
        // orient the camera to the player's location
        this.LevelCamera.Transform.Translation = Real3( spawnPoint.X, spawnPoint.Y, this.LevelCamera.Transform.Translation.Z );
    }
    
    function SpawnPickupsAndExits ( listOfRooms : CogNameRange ) 
    {
        // TODO: - create 3 arrays - easy, medium, and hard rooms.
        //       - determine whether a room is "easy," "medium," or "hard
        //         based off of how far away they are from the player 
        //          (do this based off of real3 comparision?)
        
        /// create a real3 using the camera's location (fuck it, it's easy)
        var spawnLocation : Real3 = Real3( this.LevelCamera.Transform.WorldTranslation.X,
                                           this.LevelCamera.Transform.WorldTranslation.Y,
                                           0 );        
        /// create some arrays to store enemies and pickups in the future
        
        // array for enemies
        // TODO: create individual arrays for how hard enemies are?
        //var enemiesToSpawn : Array[Archetype] = Array[Archetype]();
        
        // array for pickups
        // TODO: create individual arrays for health, dmg, speed?
        //var pickupsToSpawn : Array[Archetype] = Array[Archetype]();
        
        // arrays for rooms 
        // this will be populated by the following foreach loop
        var easyRooms : Array[Cog]      = Array[Cog]();
        var mediumRooms : Array[Cog]    = Array[Cog]();
        var hardRooms : Array[Cog]      = Array[Cog]();
        // special rooms
        var safeRooms : Array[Cog]      = Array[Cog]();
        var lootRooms : Array[Cog]      = Array[Cog]();
        
        // to check if special rooms have spawned
        var spawnedLootRooms : Integer  = 0;
        var maxLootRooms : Integer      = this.LevelDifficulty * this.LootRoomModifier; // 2 easy, 4 medium, 6 hard
        var exitRoomSpawned : Boolean   = false;
        
        foreach ( var background in listOfRooms ) 
        {
            // populate each array of rooms based off of
            // relative distance between the room and the player
            var roomLocation : Real3 = background.Transform.WorldTranslation;
            
            // we only need the x and y difference, not Z
            var xDifference : Integer = Math.Abs( spawnLocation.X - roomLocation.X ) as Integer;
            var yDifference : Integer = Math.Abs( spawnLocation.Y - roomLocation.Y ) as Integer;
            //Console.WriteLine( "Found difference of:\t`xDifference`, `yDifference`" );
            
            // check if we're not in the spawn room and we haven't spawned the max # of loot rooms yet
            if ( (xDifference != 0 as Integer) && (yDifference != 0 as Integer) && (spawnedLootRooms < maxLootRooms) )
            {
                // get a random number between 0 and some multiple of 5 based off of the dynamic difficulty
                var shouldSpawn : Integer = this.RandomGenerator.Range( 0, (5 * this.DynamicDifficulty) ) as Integer;
                // if that random number is less than or equal to two, spawn a loot room
                if ( shouldSpawn <= 2 ) 
                {
                    ++spawnedLootRooms;
                    background.Parent.RoomController.IsLootRoom  = true;
                    background.Parent.RoomController.EnemiesDead = true;
                    background.Sprite.Color = Real4( 255, 240, 128, 1.00 );
                }
            }
            
            
            if ( (xDifference != 0 as Integer) && (yDifference != 0 as Integer)
                && (background.Parent.RoomController.IsLootRoom == false) && (exitRoomSpawned == false) )
            {
                exitRoomSpawned = true;
                background.Sprite.Color = Real4( 16, 255, 128, 1.00);
                
                // create an exit tile in the exit room
                var minLocationToSpawn : Real3 = Real3( (background.Transform.WorldTranslation.X as Integer) - 8, 
                                                        (background.Transform.WorldTranslation.Y as Integer) - 5, 
                                                        0 );
                var maxLocationToSpawn : Real3 = Real3( (background.Transform.WorldTranslation.X as Integer) + 8, 
                                                        (background.Transform.WorldTranslation.Y as Integer) + 5, 
                                                        0 );
                // create the spawnpoint for the exit
                var spawnPoint : Real3 = Real3( this.RandomGenerator.Range(minLocationToSpawn.X, maxLocationToSpawn.X) as Integer, 
                                                this.RandomGenerator.Range(minLocationToSpawn.Y, maxLocationToSpawn.Y) as Integer,
                                                0 );

                // spawn in the exit tile
                this.Space.CreateAtPosition( this.LevelExit, spawnPoint );
                
                Console.WriteLine( "Exit room spawned at: `background.Parent.Transform.WorldTranslation`" );
            }
            
        }
        
        /*
        Console.WriteLine("\n Done with easy rooms.\n");
        foreach ( var room in easyRooms ) {
            Console.WriteLine( "Found easy room at:\t`room.Transform.WorldTranslation`" );
        }
        */
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        Math.Clamp( this.DynamicDifficulty, 0, 100 );
    }
}

