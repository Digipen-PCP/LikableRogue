// TODO: 
//       - random generation for rooms around secondary rooms (tertriary room generation)
//       - create interior objects, write generation code ]V
//       - work on background randomization ]-> create arrays, implement 
//       - work on wall randomization       ]

class LevelController : ZilchComponent
{
    // Initialize properties
    [Property]
    var RoomHeight : Integer = 15;
    [Property]
    var RoomWidth : Integer  = 21;
    [Property]
    var MaxRooms : Integer   = 5;
    
    // archetype initialization
    [Property]
    var OuterWallTile : Archetype   = null;
    [Property]
    var PlayerCharacter : Archetype = null;
    [Property]
    var BackgroundImage : Archetype = null;
    
    // random amounts of rooms to generate
    [Property]
    var MaxRoomsWithFourExits : Integer  = 2;
    [Property]
    var MaxRoomsWithThreeExits : Integer = 3;
    [Property]
    var MaxRoomsWithTwoExits : Integer   = 5;
    // rooms with 1 exit are used to cap off all un-closed exit
    
    // here are some variables to modify instead of our properties
    var NumRoomsWithFourExitsToGenerate : Integer  = 0;
    var NumRoomsWithThreeExitsToGenerate : Integer = 0;
    var NumRoomsWithTwoExitsToGenerate : Integer   = 0;
    
    // Create several archetypes for rooms
    /// ROOMS WITH  FOUR EXITS ///
    [Property]
    var RoomArchetype00 : Archetype = null;
    /*
    /// ROOMS WITH THREE EXITS ///
    [Property]
    var RoomArchetype01 : Archetype = null;
    ///  ROOMS WITH TWO EXITS  ///
    [Property]
    var RoomArchetype02 : Archetype = null;
    ///  ROOMS WITH  ONE EXIT  ///
    [Property]
    var RoomArchetype03 : Archetype = null;
    ///      SPECIAL ROOMS     ///
    [Property]
    var RoomArchetype04 : Archetype = null;
    */
    
    /// ARRAY FOR ROOMS WITH FOUR EXITS ///
    var RoomsWithFourExits : Array[Archetype]   = Array[Archetype]();
    /// ARRAY FOR ROOMS WITH THREE EXITS ///
    var RoomsWithThreeExits : Array[Archetype]  = Array[Archetype]();
    /// ARRAY FOR ROOMS WITH TWO EXITS ///
    var RoomsWithTwoExits : Array[Archetype]    = Array[Archetype]();
    /// ARRAY FOR ROOMS WITH ONE EXIT ///
    var RoomsWithOneExit : Array[Archetype]     = Array[Archetype]();
    /// ARRAY FOR SPECIAL ROOMS ///
    var SpecialRooms : Array[Archetype]         = Array[Archetype]();
    
    // create an archetype for our origin room
    var OriginRoom : Cog = null;
    
    // this is the last room we generated 
    var LastRoomGenerated : Cog = null;
    
    // Create an empty object to initialize the camera into
    var LevelCamera : Cog = null;
    
    // Create a random number generator for generating random numbers
    var RandomGenerator : Random = Random();
    
    function Initialize(init : CogInitializer)
    {
        // here are some variables we decrement instead of properties
        this.NumRoomsWithFourExitsToGenerate    = this.MaxRoomsWithFourExits;
        this.NumRoomsWithThreeExitsToGenerate   = this.MaxRoomsWithFourExits;
        this.NumRoomsWithTwoExitsToGenerate     = this.MaxRoomsWithFourExits;
    
        // initialize the camera object
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        
        // put the room archetypes into the array
        // I'll change this into a for loop later
        this.RoomsWithFourExits.Add(this.RoomArchetype00);
        
        // create the tiles in the board
        this.BoardSetup();
        // spawn the player 
        this.SpawnPlayer(10, 7);
    }
    
    function BoardSetup () {
        
        // generate the initial room
        this.OriginRoom = this.GenerateRoom( 0, 0, this.RoomsWithFourExits[0] );
        this.LastRoomGenerated = this.OriginRoom;
        
        // generate the following rooms
        //this.GenerateManyRooms ();
        
        // move camera to center on current level
        var cameraXAvg : Integer = ( ( -1 + (this.RoomWidth + 1) ) / 2 );
        var cameraYAvg : Integer = ( ( -1 + (this.RoomHeight +1) ) / 2 );
        this.LevelCamera.Transform.Translation = Real3(cameraXAvg, cameraYAvg, 40);
    }
    
    function GenerateManyRooms () : Cog {
        // after initial room is generated, generate rooms fractally around it
        // could we do this logarithmically in order to rapidly decrease amount
        // of rooms generated?
        
        // I know I can have this code here
        
        // we can create some random logic here, using the following variables:
        //
        // this.LastRoomGenerated.RoomController.( NorthRoomGenerated | SouthRoomGenerated | EastRoomGenerated | WestRoomGenerated )
        //
        // this.MaxRoomsWithFourExits
        // this.MaxRoomsWithThreeExits
        // this.MaxRoomsWIthTwoExits
        //
        // this.RoomsWithFourExits(n)
        // this.RoomsWithThreeExits(n)
        // this.RoomsWithTwoExits(n)
        // this.RoomsWithOneExit(n)
        // this.SpecialRooms(n);
        //
        // this.NumRoomsWithFourExitsToGenerate
        // this.NumRoomsWithThreeExitsToGenerate
        // this.NumRoomsWithThreeExitsToGenerate
        
        /// Generate some placeholder variables that we'll fill out later
        // Whether we should generate rooms in given directions
        var shouldGenerateNorth = false;
        var shouldGenerateEast  = false;
        var shouldGenerateSouth = false;
        var shouldGenerateWest  = false;
        // how many exits the room we generate should have
        var shouldGenerateNumExits : Integer = 0;
        // 
        
        // select the last room we generated 
        var generatedRoom : Cog = this.LastRoomGenerated;
        
        // fill out some of our earlier variables based on the 
        // properties of the last room generated
        if ( this.LastRoomGenerated.RoomController.NorthExit == true
             && this.LastRoomGenerated.RoomController.NorthRoomGenerated == false ) 
        {
            shouldGenerateNorth = true;
        }
        if ( this.LastRoomGenerated.RoomController.EastExit == true
             && this.LastRoomGenerated.RoomController.EastRoomGenerated == false ) 
        {
            shouldGenerateEast = true;
        }
        if ( this.LastRoomGenerated.RoomController.SouthExit == true
             && this.LastRoomGenerated.RoomController.SouthRoomGenerated == false ) 
        {
            shouldGenerateSouth = true;
        }
        if ( this.LastRoomGenerated.RoomController.WestExit == true
             && this.LastRoomGenerated.RoomController.WestRoomGenerated == false ) 
        {
            shouldGenerateWest = true;
        }
        
        // now that we know where we _can_ generate rooms,
        // we should determine what type of room _to_ generate.
        // if ( this.NumRoomsWithFourExitsToGenerate )
        // generate a random number between two and four to determine what room we place
        var numExitsToUse : Integer = 1;
        if ( this.NumRoomsWithFourExitsToGenerate >= 1 ) {
            numExitsToUse = Math.Round( this.RandomGenerator.Range(2, 4), 0 ) as Integer;
        } 
        else if ( this.NumRoomsWithThreeExitsToGenerate >= 1 ) {
            numExitsToUse = Math.Round( this.RandomGenerator.Range(2, 3), 0 ) as Integer;
        }
        else if ( this.NumRoomsWithTwoExitsToGenerate >= 1 ) {
            numExitsToUse = 2;
        }
        else { numExitsToUse = 1; }
        /*
        if ( this.NumRoomsWithTwoExitsToGenerate >= 1 )     { maxExitsToUse == 2; }
        if ( this.NumRoomsWithThreeExitsToGenerate >= 1 )   { maxExitsToUse == 3; }
        if ( this.NumRoomsWithFourExitsToGenerate >= 1 )    { maxExitsToUse == 4; }
        */
        
        
        
        // generate rooms with for loop
        // this loop starts at 2, since we already generated the first room
        var roomsToGenerate : Integer = this.RandomGenerator.Range(2, this.MaxRooms) as Integer;
        /*
        for ( var x = 2; x <= roomsToGenerate; ++x ) {
            var northGenerated : Boolean = false; // cardinal == 1
            var southGenerated : Boolean = false; // cardinal == 2
            var eastGenerated  : Boolean = false; // cardinal == 3
            var westGenerated  : Boolean = false; // cardinal == 4
            var cardinal : Integer = this.RandomGenerator.Range(1, 5) as Integer;
            // Console.WriteLine(cardinal);
            
            if (cardinal == 1 && northGenerated != true) {
                northGenerated = false;
                this.GenerateRoom(0, ( this.RoomHeight + 1 ));
            }
            else if (cardinal == 2 && southGenerated != true) {
                southGenerated = false;
                this.GenerateRoom(0, ( 0 - (this.RoomHeight + 1) ));
            }
            else if (cardinal == 3 && eastGenerated != true) {
                eastGenerated = false;
                this.GenerateRoom(( this.RoomWidth + 1 ), 0);
            }
            else if (cardinal == 4 && westGenerated != true) {
                westGenerated = false;
                this.GenerateRoom(( 0 - (this.RoomWidth + 1)) , 0);
            }
            else {
                Console.WriteLine( "ERROR! \nSomething went wrong generating rooms.\n" );
            }
        }
        */
        
        // make this function return the room it generated so we can assign it a value
        // and read its properties, and whatever other properties we need to
        return this.LastRoomGenerated; // change to generatedRoom once room generation is, well, working
    }
    
    function GenerateRoom ( originX : Integer,    // x coordinate of first inhabitable square
                            originY : Integer,    // Y coordinate of the first inhabitable square
                            typeOfRoomToCreate : Archetype  // should we create a room with 4 exits, 3, etc
                          ) : Cog                 // the type of thing we return  
    {
        // create a real3 to be the origin of the room
        var newRoomPosition = Real3(originX, originY, 0);
        // instantiate a room 
        var newlyCreatedRoom = this.Space.CreateAtPosition(typeOfRoomToCreate, newRoomPosition);
        
        return newlyCreatedRoom;
    }
    
    function SpawnPlayer (spawnX : Integer, spawnY : Integer) {
        // use these random points to create a real3 that we'll spawn the player at
        var spawnPoint : Real3 = Real3(spawnX, spawnY, 0);
        
        // now the magic happens - spawn the player at the spawnpoint
        var player = this.Space.CreateAtPosition(this.PlayerCharacter, spawnPoint);
        player.Transform.Translation = spawnPoint;
    }
}
