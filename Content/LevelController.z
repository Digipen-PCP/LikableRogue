// TODO: 
//       - random generation for rooms around secondary rooms (tertriary room generation)
//       - create door archetype, write collision handling.
//       - create interior objects, write generation code ]V
//       - work on background randomization ]-> create arrays, implement 
//       - work on wall randomization       ]

class LevelController : ZilchComponent
{
    // Initialize properties
    [Property]
    var RoomHeight : Integer = 15;
    [Property]
    var RoomWidth : Integer = 21;
    [Property]
    var MaxRooms : Integer = 5;
    
    // archetype initialization
    [Property]
    var OuterWallTile : Archetype = null;
    [Property]
    var PlayerCharacter : Archetype = null;
    [Property]
    var BackgroundImage : Archetype = null;
    
    // Create several archetypes for rooms
    [Property]
    var RoomArchetype00 : Archetype = null;
    /*
    [Property]
    var RoomArchetype01 : Archetype = null;
    [Property]
    var RoomArchetype02 : Archetype = null;
    [Property]
    var RoomArchetype03 : Archetype = null;
    [Property]
    var RoomArchetype04 : Archetype = null;
    */
    
    // create an array to put all the room archetypes in
    var RoomArchetypeArray : Array[Archetype] = Array[Archetype]();
    
    
    // Create an empty object to initialize the camera into
    var LevelCamera : Cog = null;
    
    // Create a random number generator for generating random numbers
    var RandomGenerator : Random = Random();
    
    function Initialize(init : CogInitializer)
    {
        // initialize the camera object
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        
        // put the room archetypes into the array
        // I'll change this into a for loop later
        this.RoomArchetypeArray.Add(this.RoomArchetype00);
        
        // create the tiles in the board
        this.BoardSetup();
        // spawn the player 
        this.SpawnPlayer(10, 7);
        
        // Don't need physics update just yet
        //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    /*
    function OnLogicUpdate(event : UpdateEvent)
    {
    }
    */
    
    function BoardSetup () {
        
        // generate the initial room
        this.GenerateRoom(0, 0);
        
        // generate rooms with for loop
        // this loop starts at 2, since we already generated the first room
        var roomsToGenerate : Integer = this.RandomGenerator.Range(2, this.MaxRooms) as Integer;

        for (var x = 2; x <= roomsToGenerate; ++x) {
            var northGenerated : Boolean = false; // cardinal == 1
            var southGenerated : Boolean = false; // cardinal == 2
            var eastGenerated  : Boolean = false; // cardinal == 3
            var westGenerated  : Boolean = false; // cardinal == 4
            var cardinal : Integer = this.RandomGenerator.Range(1, 5) as Integer;
            // Console.WriteLine(cardinal);
            
            if (cardinal == 1 && northGenerated != true) {
                northGenerated = false;
                this.GenerateRoom(0, ( this.RoomHeight + 1 ));
            }
            else if (cardinal == 2 && southGenerated != true) {
                southGenerated = false;
                this.GenerateRoom(0, ( 0 - (this.RoomHeight + 1) ));
            }
            else if (cardinal == 3 && eastGenerated != true) {
                eastGenerated = false;
                this.GenerateRoom(( this.RoomWidth + 1 ), 0);
            }
            else if (cardinal == 4 && westGenerated != true) {
                westGenerated = false;
                this.GenerateRoom(( 0 - (this.RoomWidth + 1)) , 0);
            }
            else {
                Console.WriteLine( "ERROR! \nSomething went wrong generating rooms.\n" );
            }
        }
        
        // move camera to center on current level
        var cameraXAvg : Integer = ( (-1 + (this.RoomWidth + 1))/2 );
        var cameraYAvg : Integer = ( (-1 + (this.RoomHeight +1))/2 );
        this.LevelCamera.Transform.Translation = Real3(cameraXAvg, cameraYAvg, 40);
    }
    
    function GenerateRoom ( originX : Integer,    // x coordinate of first inhabitable square
                            originY : Integer  )  // Y coordinate of the first inhabitable square
    {
        // get a random index from the array of room archetypes
        var randomRoomID : Integer = this.RandomGenerator.Range(0, this.RoomArchetypeArray.Count) as Integer;
        // create a real3 to be the origin of the room
        var newRoomPosition = Real3(originX, originY, 0);
        // instantiate a room 
        var newlyCreatedRoom = this.Space.CreateAtPosition(this.RoomArchetypeArray.Get(randomRoomID), newRoomPosition);
    }
    
    function SpawnPlayer (spawnX : Integer, spawnY : Integer) {
        // use these random points to create a real3 that we'll spawn the player at
        var spawnPoint : Real3 = Real3(spawnX, spawnY, 0);
        
        // now the magic happens - spawn the player at the spawnpoint
        var player = this.Space.CreateAtPosition(this.PlayerCharacter, spawnPoint);
    }
}
