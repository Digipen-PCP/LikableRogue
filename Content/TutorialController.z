class TutorialController : ZilchComponent
{
    // TODO: Edit these later
    // the various tutorial lines
    [Property]
    var TutLine01 : String = "I can move with WASD or the Left Joystick.";
    [Property]
    var TutLine02 : String = "I can look with the Mouse or the Right Joystick.";
    [Property]
    var TutLine03 : String = "I can swing my sword with the LMB, Left Trigger, or Left Bumper.";
    [Property]
    var TutLine04 : String = "I can shoot my slingshot with the RMB, Right Trigger, or Right Bumper.";
    [Property]
    var TutLine05 : String = "I have to pick up the rocks I shoot with my slingshot, or they get lost.";
    
    // for interacting with the player
    var PlayerCog : Cog = null;
    // for updating the text
    var TutorialText : Cog = null;
    // the background speech bubble behind the text
    var TutorialBackground : Cog = null;
    // the camera, for positioning
    var CameraCog : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        // instantiate the player variable
        this.PlayerCog = this.Space.FindObjectByName( "Player" );
        // instantiate the Text variable
        this.TutorialText = this.Owner.FindChildByName( "TutorialText" );
        // instantiate the background variable
        this.TutorialBackground = this.Owner.FindChildByName( "TutorialBG" );
        // instantiate the camera
        this.CameraCog = this.Space.FindObjectByName( "Camera" );
        
        // clear out the text
        this.TutorialText.SpriteText.Text = "";
        // hide sprite
        this.TutorialBackground.Sprite.Color = Real4( 1.0, 1.0, 1.0, 0.0 );
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.Owner.Transform.Translation = Real3( this.CameraCog.Transform.WorldTranslation.X, this.CameraCog.Transform.WorldTranslation.Y - 5.5, 30 );
        /*
        var seq = Action.Sequence( this.Owner.Actions );
        var newPosition = Real3( this.PlayerCog.Transform.WorldTranslation.X + 5,
                                 this.PlayerCog.Transform.WorldTranslation.Y + 3,
                                 10 );
        var dtModifier : Real = 2.5;
        
        Action.Property( seq, @this.Owner.Transform.WorldTranslation, newPosition, event.Dt * dtModifier, Ease.QuadIn );
        */
    }
    
    function DisplayTutorial()
    {
        var seq = Action.Sequence( this.Owner.Actions );
        var textCrawlTime    = 1.5;
        var delayBetweenText = 1.5;
        
        Action.Delay( seq, 0.5 );
        Action.Property( seq, @this.TutorialBackground.Sprite.Color, Real4(1.0, 1.0, 1.0, 1.0), 0.5, Ease.Linear );
        Action.Delay( seq, 0.5 );
        
        // Line 01
        // first, print ou the line of the tutorial that we want to use
        Action.Property( seq, @this.TutorialText.SpriteText.Text, this.TutLine01, textCrawlTime, Ease.Linear );
        // then wait so the player can read it
        Action.Delay( seq, delayBetweenText );
        // then clear out the text box to avoid weird visual glitches
        Action.Property( seq, @this.TutorialText.SpriteText.Text, "", textCrawlTime / 3, Ease.Linear );
        // Line 02
        Action.Property( seq, @this.TutorialText.SpriteText.Text, this.TutLine02, textCrawlTime, Ease.Linear );
        Action.Delay( seq, delayBetweenText );
        Action.Property( seq, @this.TutorialText.SpriteText.Text, "", textCrawlTime / 3, Ease.Linear );
        // Line 03
        Action.Property( seq, @this.TutorialText.SpriteText.Text, this.TutLine03, textCrawlTime, Ease.Linear );
        Action.Delay( seq, delayBetweenText );
        Action.Property( seq, @this.TutorialText.SpriteText.Text, "", textCrawlTime / 3, Ease.Linear );
        // Line 04
        Action.Property( seq, @this.TutorialText.SpriteText.Text, this.TutLine04, textCrawlTime, Ease.Linear );
        Action.Delay( seq, delayBetweenText );
        Action.Property( seq, @this.TutorialText.SpriteText.Text, "", textCrawlTime / 3, Ease.Linear );
        // Line 05
        Action.Property( seq, @this.TutorialText.SpriteText.Text, this.TutLine05, textCrawlTime, Ease.Linear );
        Action.Delay( seq, delayBetweenText );
        
        Action.Property( seq, @this.TutorialText.SpriteText.Text, "", textCrawlTime, Ease.Linear );
        Action.Delay( seq, delayBetweenText );
        Action.Property( seq, @this.TutorialBackground.Sprite.Color, Real4(1.0, 1.0, 1.0, 0.0), 0.5, Ease.Linear );
        Action.Call( seq, this.Owner.Destroy );
    }
}
