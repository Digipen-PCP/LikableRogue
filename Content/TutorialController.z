class TutorialController : ZilchComponent
{
    // TODO: Edit these later
    // the various tutorial lines
    [Property]
    var MoveText : String   = "I can move with WASD or the Left Joystick.";
    [Property]
    var LookText : String   = "I can look with the Mouse or the Right Joystick.";
    [Property]
    var SwordText : String  = "I can swing my sword with the LMB, Left Trigger, or Left Bumper.";
    [Property]
    var SlingshotText : String = "I can shoot my slingshot with the RMB, Right Trigger, or Right Bumper.";
    [Property]
    var PickupText : String = "I have to pick up the rocks I shoot with my slingshot, or they get lost.";
    [Property]
    var DoorText : String   = "Press Space or the Right Joystick Button to enter doors.";
    
    // for interacting with the player
    var PlayerCog : Cog = null;
    // for updating the text
    var TutorialText : Cog = null;
    // the background speech bubble behind the text
    var TutorialBackground : Cog = null;
    // the camera, for positioning
    var CameraCog : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        // instantiate the player variable
        this.PlayerCog = this.Space.FindObjectByName( "Player" );
        // instantiate the Text variable
        this.TutorialText = this.Owner.FindChildByName( "TutorialText" );
        // instantiate the background variable
        this.TutorialBackground = this.Owner.FindChildByName( "TutorialBG" );
        // instantiate the camera
        this.CameraCog = this.Space.FindObjectByName( "Camera" );
        
        // clear out the text
        this.TutorialText.SpriteText.Text = "";
        // hide sprite
        this.TutorialBackground.Sprite.Color = Real4( 1.0, 1.0, 1.0, 0.0 );
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.Owner.Transform.Translation = Real3( this.CameraCog.Transform.WorldTranslation.X - 3.5, this.CameraCog.Transform.WorldTranslation.Y - 6.5, 30 );
    }
    
    /// HOW TO CALL THIS FUNCTION:
    /// you have to pass a string, but I've defined a few above.
    /// EXAMPLE: this.TutorialHolder = this.Space.FindObjectByName( "TutorialHolder" );
    ///          this.TutorialHolder.TutorialController.DisplaySpecificTutorial( this.TutorialHolder.TutorialController.MoveText );
    function DisplaySpecificTutorial ( textToDisplay : String )
    {
        var seq = Action.Sequence( this.Owner.Actions );
        var textCrawlTime    = 1.5;
        var delayBetweenText = 1.5;
        
        // call a small delay, fade in the BG, call another small delay.
        Action.Delay( seq, 0.5 );
        Action.Property( seq, @this.TutorialBackground.Sprite.Color, Real4(1.0, 1.0, 1.0, 0.5), 0.5, Ease.Linear );
        Action.Delay( seq, 0.5 );
        
        // first, print ou the line of the tutorial that we want to use
        Action.Property( seq, @this.TutorialText.SpriteText.Text, textToDisplay, textCrawlTime, Ease.Linear );
        // then wait so the player can read it
        Action.Delay( seq, delayBetweenText );
        // then clear out the text box to avoid weird visual glitches
        Action.Property( seq, @this.TutorialText.SpriteText.Text, "", textCrawlTime / 3, Ease.Linear );
        
        // call a short delay, then fade out / hide the background.
        Action.Delay( seq, delayBetweenText );
        Action.Property( seq, @this.TutorialBackground.Sprite.Color, Real4(1.0, 1.0, 1.0, 0.0), 0.5, Ease.Linear );
    }
}
