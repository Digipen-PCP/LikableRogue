class TutorialController : ZilchComponent
{
    // TODO: Edit these later
    // the various tutorial lines
    [Property]
    var MoveText : String   = "Move with WASD or the Left Joystick.";
    [Property]
    var LookText : String   = "Use  Mouse or the Right Joystick to aim.";
    [Property]
    var SwordText : String  = "Use the LMB, Left Trigger, or Left Bumper to swing the sword.";
    [Property]
    var SlingshotText : String = "Shoot the slingshot with the RMB, Right Trigger, or Right Bumper.";
    [Property]
    var PickupText : String = "Pick up the rocks I shoot with my slingshot, or they get lost.";
    [Property]
    var DoorText : String   = "Press Space or the A button to enter doors.";
    
    // for interacting with the player
    var PlayerCog : Cog = null;
    // for updating the text
    var TutorialText : Cog = null;
    // the background speech bubble behind the text
    var TutorialBackground : Cog = null;
    
    // Michael-Paul needs this for some of his code
    var CurrentText : String = "";
    
    function Initialize(init : CogInitializer)
    {
        this.Setup();
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function Setup()
    {
        // instantiate the Text variable
        this.TutorialText = this.Owner.FindChildByName( "TutorialText" );
        // instantiate the background variable
        this.TutorialBackground = this.Owner.FindChildByName( "TutorialBG" );
        // instantiate the player
        this.PlayerCog = this.Space.FindObjectByName( "Player" );
        
        // clear out the text
        this.TutorialText.SpriteText.Text = "";
        // hide sprite
        this.TutorialBackground.Sprite.Color = Real4( 1.0, 1.0, 1.0, 0.0 );
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var newLocation = Real3( this.PlayerCog.Transform.WorldTranslation.X + 6,
                                 this.PlayerCog.Transform.WorldTranslation.Y + 3,
                                 10 );
        
        var seq = Action.Sequence( this.Owner.Actions );
        var easeDelay : Real = 1.5;
        
        Action.Property( seq, @this.Owner.Transform.WorldTranslation, newLocation, event.Dt * easeDelay, Ease.QuadIn );
    }
    
    /// HOW TO CALL THIS FUNCTION:
    /// you have to pass a string, but I've defined a few above.
    /// it also takes two reals. The first determines how long it takes for the text to 'type out,' 
    /// the second determines how long it stays on screen.
    ///
    /// EXAMPLE: this.TutorialHolder = this.Space.FindObjectByName( "TutorialHolder" );
    ///          this.TutorialHolder.TutorialController.DisplaySpecificTutorial( this.TutorialHolder.TutorialController.MoveText, 1.5, 1.5 );
    function DisplaySpecificTutorial( textToDisplay : String, textCrawlTime : Real, delayBetweenText : Real )
    {
        // this is weird
        this.Setup();
        
        // Michael-Paul needs this for his code
        this.CurrentText = textToDisplay;
        
        // so strange glitchy stuff doesn't happen
        this.TutorialText.SpriteText.Text    = "";
        this.TutorialText.SpriteText.Color   = Real4( 0.0, 0.0, 0.0, 1.0 );
        this.TutorialBackground.Sprite.Color = Real4( 1.0, 1.0, 1.0, 0.0 );
        
        var seq = Action.Sequence( this.Owner.Actions );
        //var textCrawlTime    = 1.5;
        //var delayBetweenText = 1.5;
        
        // call a small delay, fade in the BG, call another small delay.
        Action.Delay( seq, 0.5 );
        Action.Property( seq, @this.TutorialBackground.Sprite.Color, Real4(1.0, 1.0, 1.0, 0.5), 0.5, Ease.Linear );
        Action.Delay( seq, 0.5 );
        
        // first, print ou the line of the tutorial that we want to use
        Action.Property( seq, @this.TutorialText.SpriteText.Text, textToDisplay, textCrawlTime, Ease.Linear );
        // then wait so the player can read it
        Action.Delay( seq, delayBetweenText );
        // then clear out the text box to avoid weird visual glitches
        Action.Property( seq, @this.TutorialText.SpriteText.Text, "", textCrawlTime / 3, Ease.Linear );
        
        // call a short delay, then fade out / hide the background.
        Action.Delay( seq, delayBetweenText );
        Action.Property( seq, @this.TutorialBackground.Sprite.Color, Real4(1.0, 1.0, 1.0, 0.0), 0.5, Ease.Linear );
    }
    
    function HideTutorial()
    {
        // to prevent bugs
        this.Setup();
        
        // hide the text being displayed
        this.TutorialText.SpriteText.Color   = Real4( 1.0, 1.0, 1.0, 0.0 );
        // hide the background for the text
        this.TutorialBackground.Sprite.Color = Real4( 1.0, 1.0, 1.0, 0.0 );
    }
}
