class CameraPositionController : ZilchComponent
{
    // we'll want to manipulate the camera using this
    var LevelCamera : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        // find the camera, put it into the camera object
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }

    function OnCollisionStarted(event : CollisionEvent) {
        
        if ( event.OtherObject.Name == "Background" ) {
            // create an action set to smooth the camera movement.
            var cameraMoveSeq : ActionSet = Action.Sequence( this.Owner.Actions as ActionSet );
            
            // fetch the X and Y coordinates of the background we just collided with
            var toMoveCameraX : Integer = event.OtherObject.Transform.WorldTranslation.X as Integer;
            var toMoveCameraY : Integer = event.OtherObject.Transform.WorldTranslation.Y as Integer;
            
            // use the current camera Z in case this ever changes
            var toMoveCameraZ : Integer = this.LevelCamera.Transform.Translation.Z as Integer;
            
            // plop the new X, Y, and Z into a Real3, set the camera's position
            var newCameraPos : Real3 = Real3( toMoveCameraX, toMoveCameraY, toMoveCameraZ );
            
            // animate the camera's movement path so it's not jumpy
            Action.Property(cameraMoveSeq, @this.LevelCamera.Transform.Translation, newCameraPos, 0.3, Ease.Linear );
        }
    }
}
