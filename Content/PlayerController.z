class PlayerController : ZilchComponent
{
    [Property]
    //MUST BE 1 - 4
    var PlayerNumber : Integer = 1;
    [Property]
    var MoveSpeed : Real = 1;
    
    var StickThreshold : Real = 0.3;
    var Gamepad : Gamepad = null;
    
    function Initialize(init : CogInitializer)
    {
        //getting the right gamepad is what enables us to have different gamepads per instance of this script due to the playernumber var
        this.Gamepad = Zero.Gamepads.GetGamePad(this.PlayerNumber - 1);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.UpdateMoveInput();
        this.UpdateOtherInput();
    }
    
    function UpdateMoveInput()
    {
        this.Owner.RigidBody.Velocity = Real3(0,0,0);
        //start with the lstick input
        var moveVec = Real3(this.Gamepad.LeftStick.X,this.Gamepad.LeftStick.Y,0);
        //add keyboard input
        if(Zero.Keyboard.KeyIsDown(Keys.A))
        {
            moveVec += Real3(-1,0,0);
        }
        if(Zero.Keyboard.KeyIsDown(Keys.D))
        {
            moveVec += Real3(1,0,0);
        }
        if(Zero.Keyboard.KeyIsDown(Keys.W))
        {
            moveVec += Real3(0,1,0);
        }
        if(Zero.Keyboard.KeyIsDown(Keys.S))
        {
            moveVec += Real3(0,-1,0);
        }
        
        //clamp variables so that keyboard + gamepad input doesn't mess with our intended values of -1 to 1
        var x = Math.Clamp(moveVec.X,-1,1);
        var y = Math.Clamp(moveVec.Y,-1,1);
        moveVec = Real3(x,y,0);
        
        
        //call move function using the variables we made
        this.Move(moveVec);
    }
    function UpdateOtherInput()
    {
        //###################################################################################################
        //KEYBOARD INPUTS
        if(Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            Console.WriteLine("Space: KeyIsPressed Example");
        }
        //###################################################################################################
        //GAMEPAD INPUTS
        if(this.Gamepad.IsButtonPressed(0))
        {
            Console.WriteLine("A");
        }
        if(this.Gamepad.IsButtonPressed(1))
        {
            Console.WriteLine("B");
        }
        if(this.Gamepad.IsButtonPressed(2))
        {
            Console.WriteLine("X");
        }
        if(this.Gamepad.IsButtonPressed(3))
        {
            Console.WriteLine("Y");
        }
        if(this.Gamepad.IsButtonPressed(4))
        {
            Console.WriteLine("Start");
        }
        if(this.Gamepad.IsButtonPressed(5))
        {
            Console.WriteLine("Back");
        }
        if(this.Gamepad.IsButtonPressed(6))
        {
            Console.WriteLine("L Stick Press");
        }
        if(this.Gamepad.IsButtonPressed(7))
        {
            Console.WriteLine("R Stick Press");
        }
        if(this.Gamepad.IsButtonPressed(8))
        {
            Console.WriteLine("L Bumper");
        }
        if(this.Gamepad.IsButtonPressed(9))
        {
            Console.WriteLine("R Bumper");
        }
        if(this.Gamepad.RightTrigger.X >= 1)
        {
            Console.WriteLine("R Trigger");
        }
        if(this.Gamepad.LeftTrigger.X >= 1)
        {
            Console.WriteLine("L Trigger");
        }
        if(this.Gamepad.IsButtonPressed(10))
        {
            Console.WriteLine("DPAD UP");
        }
        if(this.Gamepad.IsButtonPressed(11))
        {
            Console.WriteLine("DPAD DOWN");
        }
        if(this.Gamepad.IsButtonPressed(12))
        {
            Console.WriteLine("DPAD LEFT");
        }
        if(this.Gamepad.IsButtonPressed(13))
        {
            Console.WriteLine("DPAD RIGHT");
        }
    }
    function Move(moveR3 : Real3)
    {
        //Applies linear impulse based on movespeed and the given vector
        this.Owner.RigidBody.ApplyLinearImpulse(moveR3 * this.MoveSpeed);
        this.Owner.RigidBody.Velocity = Math.Normalize(this.Owner.RigidBody.Velocity);
        this.Owner.RigidBody.Velocity *= this.MoveSpeed;
    }
}

