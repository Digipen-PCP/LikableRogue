class PlayerController : ZilchComponent
    {
    [Property]
    //MUST BE 1 - 4
    var PlayerNumber : Integer = 1;
    
    var MoveSpeed : Real = 6;
    
    //[Property]
    //var Location : Real3 = Real3(0, 0, 0);
    
    //Initialize empty objects Object Variables
    var LevelCamera : Cog = null;    
    [Property]
    var SlingShotProjectArch : Archetype = null;
    
    [Property]
    var MaxHP : Integer = 10;
    var CurentHP : Integer = 0;
    
    //damag vars
    var SwordDamag : Integer = 2;
    
    // gamepad and mouse settings
    var StickThreshold : Real = 0.3;
    var Gamepad : Gamepad = null;
    var MousePosition : Real3 = Real3(0,0,0);
    var Ang : Real = 0;
    var CamSize : Integer = 17;
    var SwordDamageBox : Cog = null;
    var SwordAttcackZone : Real3 = Real3(0,-1,0);
    
    //slingshot vars
    var ProjMoveVec : Array[Real3] =  Array[Real3]();
    var SlingShotFiring : Boolean = false;
    var SlingShotProjectArchArr :Array[Archetype] = Array[Archetype]();
    var SlingShotProjectCog : Array[Cog] = Array[Cog]();
    var SlinShoAmmCou : Integer =  -1;
    var ProMoveSpeed : Real = 20;//Make sure player cant catch it in the air
    var MaxProjec : Integer = 0;
    var CurentProject : Integer = 0;
    var Pjtl_Damage : Integer = 1;
    
    var IsPlayerStun : Boolean = false;
    var MoveVec : Real3 = Real3(0,0,0);
    
    function StunPlayer(time : Real)
    {   
        //this.Owner.CapsuleCollider.SendsEvents=false;
        //this.Owner.CapsuleCollider.Ghost=true;
        this.Owner.Collider.CollisionGroup = CollisionGroup.Find("InvincableCollisionGroup");
        Console.WriteLine(this.Owner.Collider.CollisionGroup.Name);
        this.Owner.Sprite.Color=Real4(1,255,255,1);
        this.IsPlayerStun = true;
        var seq = Action.Sequence(this.Owner.Actions);
        Actions.Delay(seq, time);
        Actions.Call(seq, this.RemoveStun);
    }
    function RemoveStun()
        {
        this.Owner.Collider.CollisionGroup = CollisionGroup.Find("DefaultGroup");
        this.Owner.Sprite.Color=Real4(1,1,1,1);
        this.IsPlayerStun = false;
        }
    function Initialize(init : CogInitializer)
        {
        this.CurentHP = this.MaxHP;
        // initialize the camera object
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        //Initalizes sword damage box
        this.SwordDamageBox = this.Space.FindObjectByName("SwordDamagBox");
        //this.SlingShotProjectCogTemp = this.Space.FindObjectByName("SlingShotProject");

        //this changes camera size. larger == you can see more
        //this.LevelCamera.Camera.Size = 50;

        //getting the right gamepad is what enables us to have different gamepads per instance of this script due to the playernumber var
        this.Gamepad = Zero.Gamepads.GetGamePad(this.PlayerNumber - 1);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.LevelSettings, Events.MouseMove, this.OnMouseMove);
        Zero.Connect(this.LevelCamera, Events.MouseScroll, this.OnMouseScroll);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        this.LevelCamera.Camera.Size = this.CamSize;
        this.LevelCamera.Camera.FieldOfView = this.CamSize;
        //this.Space.CreateAtPosition(this.SlingShotProjectArchArr(0), Real3(0,0,0))
        }
    function SwordSlash()
        {
        if (Zero.Mouse.IsButtonDown(MouseButtons.Left))
            {
            this.UpdateMouseMovement();
            }
        if(this.Gamepad.IsButtonHeld(8)||Zero.Mouse.IsButtonDown(MouseButtons.Left))// Left Bumper
            {
            this.SwordDamageBox.Transform.Translation=this.SwordAttcackZone;
            this.SwordDamageBox.Sprite.Visible=true;
            this.SwordDamageBox.BoxCollider.SendsEvents=true;
            var seq = Action.Sequence(this.Owner.Actions);
            Actions.Delay(seq, 0.1);
            Actions.Call(seq, this.DeSlash);
            }
    }
    function DeSlash()
        {
        this.SwordDamageBox.Sprite.Visible=false;
            this.SwordDamageBox.BoxCollider.SendsEvents=false;
        }
    function ProjectileLaunch()
        {
        if(((Zero.Mouse.IsButtonDown(MouseButtons.Right)||this.Gamepad.IsButtonPressed(9))&& this.SlingShotFiring==false)&&(this.MaxProjec>=this.CurentProject))
            {
            this.SlinShoAmmCou+=1;
            //Creating a SlingShotProjectile
            //this.Owner.Transform.Translation.X);
            //this.ProjMoveVec.Add(Real3(this.Owner.Transform.Translation.X,this.Owner.Transform.Translation.Y,0));
            this.SlingShotProjectArchArr.Add(this.SlingShotProjectArch);
            //Console.WriteLine(this.SlinShoAmmCou);
            var stuff = this.Space.CreateAtPosition(this.SlingShotProjectArchArr.Get(this.SlinShoAmmCou), Real3(this.Owner.Transform.Translation.X+this.SwordAttcackZone.X,this.Owner.Transform.Translation.Y+this.SwordAttcackZone.Y,0));
            this.SlingShotProjectCog.Add(stuff);
            this.SlingShotFiring=true;
            if (Zero.Mouse.IsButtonDown(MouseButtons.Right))
                {
                /*
                this.ProjMoveVec.Add(Real3(this.LevelSettings.CameraViewport.
                                       ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0).X-this.Owner.Transform.Translation.X,//Get Mouse X relative to player
                                       this.LevelSettings.CameraViewport.
                                       ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0).Y-this.Owner.Transform.Translation.Y,0));//Get Mouse Y relative to player
                //this.SlingShotProjectCog.Get(0).Transform.Translation=Real3(0,0,0);
                //this.SlingShotProjectCog.Get(this.SlinShoAmmCou).BoxCollider.Ghost=false;
                */
                this.ProjMoveVec.Add(this.SwordAttcackZone);
                ++this.CurentProject;
                }
            if(this.Gamepad.IsButtonPressed(9))// Left Bumper
                {
                //var real3temp = Real3(this.Gamepad.RightStick.X, this.Gamepad.RightStick.Y,0);
                this.ProjMoveVec.Add(this.SwordAttcackZone);
                //this.ProjMoveVec=Real3(0,0,0);
                //this.SwordDamageBox.Transform.Translation=this.SwordAttcackZone;
                //this.SlingShotProjectCog.Sprite.Visible=true;
                //this.ProjMoveVec=Real3(this.Gamepad.RightStick.X,this.Gamepad.RightStick.Y,0);
                //this.SlingShotProjectCog.Get(0).Transform.Translation=Real3(0,0,0);
                //this.SlingShotProjectCog.Get(this.SlinShoAmmCou).BoxCollider.Ghost=false;
                ++this.CurentProject;
                }
            this.MoveProjectile(this.ProjMoveVec.Get(this.SlinShoAmmCou));
            }

        if ((Zero.Mouse.IsButtonDown(MouseButtons.Right)==false&&(this.Gamepad.LeftTrigger.X<=0))&&(this.MaxProjec>=this.CurentProject)) //(this.Gamepad.IsButtonReleased(8)||(Zero.Mouse.IsButtonDown(MouseButtons.Left)==false))
            {
            //Console.WriteLine(this.Gamepad.LeftTrigger.X);
                this.SlingShotFiring=false;
            //    this.SlingShotFiring=false;
            //this.SlingShotProjectCog.SpriteParticleSystem.Visible=false;
            //this.SlingShotProjectCog.BoxCollider.Ghost=true;
            }
        }
    function OnMouseScroll(event : MouseEvent)//camera zoom/fov based on scroll
        {
        if(event.Scroll.Y<0)
            {
            this.CamSize+=3;
            }
        else
            {
            this.CamSize-=3;
            }
        this.LevelCamera.Camera.Size = this.CamSize;
        this.LevelCamera.Camera.FieldOfView = this.CamSize;
        }
    function OnMouseMove(event : MouseEvent)//Updates Ang when mouse moves
        {
        this.UpdateMouseMovement();
        }
    function UpdateMouseMovement()//Updates Ang based on mouse location
        {
        
        this.MousePosition = Real3(this.LevelSettings.CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0).X-this.Owner.Transform.Translation.X,//Get Mouse X relative to player
                                   this.LevelSettings.CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0).Y-this.Owner.Transform.Translation.Y,
                                   0);//Get Mouse Y relative to player
        this.Ang = Math.Angle2D(this.MousePosition);
        }
    function OnLogicUpdate(event : UpdateEvent)
        {
        if (this.IsPlayerStun==false)
        {
            this.UpdateMoveInput();
        }
        if (this.CurentHP<=0)
            {
                //this.Owner.Destroy();
                this.Space.LoadLevel( Level.Find( "GameOverScreen" ) );
            }
        this.ProjectileLaunch();
        this.SwordSlash();
        this.UpdateOtherInput();
        this.UpdateFacingInput();
        //this.SlingshotSpeed+=0.12;
        //this.SlingShotProjectCog.Transform.Translation=Real3(this.SlingshotSpeed,0,0);
        //this.UpdateMouseMovement();
        }
    function UpdateFacingInput()
        {
        //Controler
        if (this.Gamepad.RightStick!=Real2(0,0))
            {
            this.Ang = Math.Angle2D(Real3(this.Gamepad.RightStick.X, this.Gamepad.RightStick.Y , 0));
            }
        //Player direction check/set code
            //North
            if (this.Ang>1&&this.Ang<2&&this.Ang!=0)
                {
                //this.ProjectAngle = Real3(0,1,0);
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("KyleN");//Sets Sprite
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
                this.SwordAttcackZone = Real3(0,1,0);//This is an example of moving the sword when the player turns
                //this.SwordDamageBox.Orientation.Rotation;
                }
            //Nort East
            if (this.Ang<1&&this.Ang>0.5&&this.Ang!=0)
                {
                //this.ProjectAngle = Real3(1,1,0);
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("KyleNW");//Sets Sprite
                this.Owner.Sprite.FlipX=true;//Resets mirror flip to off
                this.SwordAttcackZone = Real3(1,1,0);
                }
            //East
            if (this.Ang>-0.5&&this.Ang<0.5&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("KyleW");
                this.Owner.Sprite.FlipX=true;
                this.SwordAttcackZone = Real3(1,0,0);
                }
            //South East
            if (this.Ang<-0.5&&this.Ang>-1&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("KyleSW");//Sets Sprite
                this.Owner.Sprite.FlipX=true;//Resets mirror flip to off
                this.SwordAttcackZone = Real3(1,-1,0);
                }
            //South
            if (this.Ang<-1&&this.Ang>-2&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("KyleS");//Sets Sprite
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
                this.SwordAttcackZone = Real3(0,-1,0);
                }
            //South West
            if (this.Ang<-2&&this.Ang>-2.6&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("KyleSW");//Sets Sprite
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to on
                this.SwordAttcackZone = Real3(-1,-1,0);
                }
            //West
            if (this.Ang<-2.6||this.Ang>2.6&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("KyleW");//Sets Sprite
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to on
                this.SwordAttcackZone = Real3(-1,0,0);
                }
            //North West
            if (this.Ang<2.6&&this.Ang>2&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("KyleNW");//Sets Sprite
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to on
                this.SwordAttcackZone = Real3(-1,1,0);
                }
            
        }
    function UpdateMoveInput()
        {
        this.Owner.RigidBody.Velocity = Real3(0,0,0);
        //start with the lstick input
        this.MoveVec = Real3(this.Gamepad.LeftStick.X,this.Gamepad.LeftStick.Y,0);
        
        //add keyboard input
        
        if(Zero.Keyboard.KeyIsDown(Keys.A))
        {
            this.MoveVec += Real3(-1,0,0);
            this.UpdateMouseMovement();//Updates Ang when key moves
        }
        if(Zero.Keyboard.KeyIsDown(Keys.D))
        {
            this.MoveVec += Real3(1,0,0);
            this.UpdateMouseMovement();//Updates Ang when key moves
        }
        if(Zero.Keyboard.KeyIsDown(Keys.W))
        {
            this.MoveVec += Real3(0,1,0);
            this.UpdateMouseMovement();//Updates Ang when key moves
        }
        if(Zero.Keyboard.KeyIsDown(Keys.S))
        {
            this.MoveVec += Real3(0,-1,0);
            this.UpdateMouseMovement();//Updates Ang when key moves
        }
        
        //clamp variables so that keyboard + gamepad input doesn't mess with our intended values of -1 to 1
        var x = Math.Clamp(this.MoveVec.X,-1,1);
        var y = Math.Clamp(this.MoveVec.Y,-1,1);
        this.MoveVec = Real3(x,y,0);
        
        
        //call move function using the variables we made
        this.Move(this.MoveVec);
    }
    
    function UpdateOtherInput()
    {
    }
    function Move(moveR3 : Real3)
    {
        //Applies linear impulse based on movespeed and the given vector
        this.Owner.RigidBody.ApplyLinearImpulse(moveR3 * this.MoveSpeed);
        this.Owner.RigidBody.Velocity = Math.Normalize(this.Owner.RigidBody.Velocity);
        this.Owner.RigidBody.Velocity *= this.MoveSpeed;

    }
    function MoveProjectile(moveR3: Real3)
        {
                //slingshot move
        this.SlingShotProjectCog.Get(this.SlinShoAmmCou).RigidBody.ApplyLinearImpulse(moveR3 * this.ProMoveSpeed);
        this.SlingShotProjectCog.Get(this.SlinShoAmmCou).RigidBody.Velocity = Math.Normalize(this.SlingShotProjectCog.Get(this.SlinShoAmmCou).RigidBody.Velocity);
        this.SlingShotProjectCog.Get(this.SlinShoAmmCou).RigidBody.Velocity *= this.ProMoveSpeed;
        }
    
    //Dylan wrote this v
    function OnCollisionStarted(event : CollisionEvent) {
        if ( event.OtherObject.Name == "Enemy" )
            {
            }
    }
}