class PlayerController : ZilchComponent
{
    [Property]
    var SpriteToChange : SpriteSource = null;
    
    [Property]
    //MUST BE 1 - 4
    var PlayerNumber : Integer = 1;
    
    [Property]
    var MoveSpeed : Real = 1;
    
    // Create an empty object to initialize the camera into
    var LevelCamera : Cog = null;
    
    // gamepad and mouse settings
    var StickThreshold : Real = 0.3;
    var Gamepad : Gamepad = null;
    var MousePosition : Real3 = Real3(0,0,0);
    var Ang : Real = 0;
    function Initialize(init : CogInitializer)
        {
        // initialize the camera object
        this.LevelCamera = this.Space.FindObjectByName("Camera");
        // this changes camera size. larger == you can see more
        //this.LevelCamera.Camera.Size = 50;
        
        //getting the right gamepad is what enables us to have different gamepads per instance of this script due to the playernumber var
        this.Gamepad = Zero.Gamepads.GetGamePad(this.PlayerNumber - 1);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.LevelSettings, Events.MouseMove, this.OnMouseMove);
        }
        
    function OnMouseMove(event : MouseEvent)//Updates Ang when mouse moves
        {
        this.UpdateMouseMovement();
        }
    function UpdateMouseMovement()//Updates Ang based on mouse location
        {
        this.MousePosition = Real3(this.LevelSettings.CameraViewport.
                                   ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0).X-this.Owner.Transform.Translation.X,//Get Mouse X relative to player
                                   this.LevelSettings.CameraViewport.
                                   ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0).Y-this.Owner.Transform.Translation.Y,0);//Get Mouse Y relative to player
        this.Ang = Math.Angle2D(this.MousePosition);
        }
    function OnLogicUpdate(event : UpdateEvent)
        {
        this.UpdateMoveInput();
        this.UpdateOtherInput();
        this.UpdateFacingInput();
        //this.UpdateMouseMovement();
        }
    function UpdateFacingInput()
        {
        //Controler
        if (this.Gamepad.RightStick!=Real2(0,0))
        {
        this.Ang = Math.Angle2D(Real3(this.Gamepad.RightStick.X, this.Gamepad.RightStick.Y , 0));
        }
        //mouse
            //North
            if (this.Ang>1&&this.Ang<2&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerN");//Sets Sprite
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
                }
            //Nort East
            if (this.Ang<1&&this.Ang>0.5&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerNE");//Sets Sprite
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
                }
            //East
            if (this.Ang>-0.5&&this.Ang<0.5&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerE");
                this.Owner.Sprite.FlipX=false;
                }
            //South East
            if (this.Ang<-0.5&&this.Ang>-1&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerSE");//Sets Sprite
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
                }
            //South
            if (this.Ang<-1&&this.Ang>-2&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerS");//Sets Sprite
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
                }
            //South West
            if (this.Ang<-2&&this.Ang>-2.6&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerSE");//Sets Sprite
                this.Owner.Sprite.FlipX=true;//Resets mirror flip to on
                }
            //West
            if (this.Ang<-2.6||this.Ang>2.6&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerE");//Sets Sprite
                this.Owner.Sprite.FlipX=true;//Resets mirror flip to on
                }
            //North West
            if (this.Ang<2.6&&this.Ang>2&&this.Ang!=0)
                {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerNE");//Sets Sprite
                this.Owner.Sprite.FlipX=true;//Resets mirror flip to on
                }
            
        }
    function UpdateMoveInput()
    {
        this.Owner.RigidBody.Velocity = Real3(0,0,0);
        //start with the lstick input
        var moveVec = Real3(this.Gamepad.LeftStick.X,this.Gamepad.LeftStick.Y,0);
        
        //add keyboard input
        
        if(Zero.Keyboard.KeyIsDown(Keys.A))
        {
            moveVec += Real3(-1,0,0);
            this.UpdateMouseMovement();//Updates Ang when key moves
        }
        if(Zero.Keyboard.KeyIsDown(Keys.D))
        {
            moveVec += Real3(1,0,0);
            this.UpdateMouseMovement();//Updates Ang when key moves
        }
        if(Zero.Keyboard.KeyIsDown(Keys.W))
        {
            moveVec += Real3(0,1,0);
            this.UpdateMouseMovement();//Updates Ang when key moves
        }
        if(Zero.Keyboard.KeyIsDown(Keys.S))
        {
            moveVec += Real3(0,-1,0);
            this.UpdateMouseMovement();//Updates Ang when key moves
        }
        
        //clamp variables so that keyboard + gamepad input doesn't mess with our intended values of -1 to 1
        var x = Math.Clamp(moveVec.X,-1,1);
        var y = Math.Clamp(moveVec.Y,-1,1);
        moveVec = Real3(x,y,0);
        
        
        //call move function using the variables we made
        this.Move(moveVec);
    }
    
    function UpdateOtherInput()
    {
        //###################################################################################################
        //KEYBOARD INPUTS
        if(Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            Console.WriteLine("Space: KeyIsPressed Example");
        }
        
        //###################################################################################################
        //GAMEPAD INPUTS
        
        // Letter buttons
        if(this.Gamepad.IsButtonPressed(0)) // A
        { Console.WriteLine("A"); }
        if(this.Gamepad.IsButtonPressed(1)) // B
        { Console.WriteLine("B"); }
        if(this.Gamepad.IsButtonPressed(2)) // X
        { Console.WriteLine("X"); }
        if(this.Gamepad.IsButtonPressed(3)) // Y
        { Console.WriteLine("Y"); }
        
        // Start & Select
        if(this.Gamepad.IsButtonPressed(4)) // Start
        { Console.WriteLine("Start"); }
        if(this.Gamepad.IsButtonPressed(5)) // Select
        { Console.WriteLine("Back"); }
        
        // Left and Right stick buttons
        if(this.Gamepad.IsButtonPressed(6)) // Left sitck pressed
        { Console.WriteLine("L Stick Press"); }
        if(this.Gamepad.IsButtonPressed(7)) // Right stick pressed
        { Console.WriteLine("R Stick Press"); }
        
        // Triggers and Bumpers
        if(this.Gamepad.IsButtonPressed(8)) // Left Bumper
        { Console.WriteLine("L Bumper"); }
        if(this.Gamepad.IsButtonPressed(9)) // Right Bumper
        { Console.WriteLine("R Bumper"); }
        if(this.Gamepad.RightTrigger.X >= 1) // Right trigger
        { Console.WriteLine("R Trigger"); }
        if(this.Gamepad.LeftTrigger.X >= 1) // Left Trigger
        { Console.WriteLine("L Trigger"); }
        
        // Digital Pad
        if(this.Gamepad.IsButtonPressed(10)) // Dpad up
        {  Console.WriteLine("DPAD UP"); }
        if(this.Gamepad.IsButtonPressed(11)) // Dpad down
        { Console.WriteLine("DPAD DOWN"); }
        if(this.Gamepad.IsButtonPressed(12)) // Dpad left
        { Console.WriteLine("DPAD LEFT"); }
        if(this.Gamepad.IsButtonPressed(13)) // Dpad right
        { Console.WriteLine("DPAD RIGHT"); }
    }
    function Move(moveR3 : Real3)
    {
        //Applies linear impulse based on movespeed and the given vector
        this.Owner.RigidBody.ApplyLinearImpulse(moveR3 * this.MoveSpeed);
        this.Owner.RigidBody.Velocity = Math.Normalize(this.Owner.RigidBody.Velocity);
        this.Owner.RigidBody.Velocity *= this.MoveSpeed;
    }
}

