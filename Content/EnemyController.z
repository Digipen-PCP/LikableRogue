class EnemyController : ZilchComponent
{
    var PigAttacking : Boolean = false;
    var MushroomAttacking : Boolean = false;
    
    var TypeOfEnemy : String; //Cat, Pig, Mushroom
    /*if (this.TypeOfEnemy == "Cat")
    {
    
    }
    else if (this.TypeOfEnemy == "Pig")
    {
        
    }
    else if (this.TypeOfEnemy == "Mushroom")
    {
        
    }*/
    
    var Active : Boolean = true; //Use this when programming when the Enemy is moving or not
    
    var IsEnemyStun : Boolean = false;
    
    var RandomGenerator : Random = Random();
    var RandomSpeed : Real;
    var RandomDrop: Integer;
    
    var Ang : Real = 0;
    var PlayerPosition : Real3 = Real3(0,0,0);
    
    var PlayerCog : Cog = null;
    var LevelCog : Cog = null;
    var PigDamageBox : Cog = null;

    [Property]
    var DefaultHP : Real = 5;
    var HP : Real;
    var InitializeHP : Boolean = true;
    
    [Property]
    var StartingMoveSpeed : Real;
    var MoveSpeed : Real;
    
    [Property]
    var Drop : Archetype = null;
    [Property]
    var DeathParticleArche : Archetype = null;
    
    function Initialize(init : CogInitializer)
    {
        this.MoveSpeed = this.StartingMoveSpeed;
        this.PlayerCog = this.Space.FindObjectByName("Player");
        this.LevelCog = this.Space.FindObjectByName("LevelManager");
        this.PigDamageBox = this.Space.FindObjectByName("PigSlashDamageBox");
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        //for dealing damage to the enemy
        if (event.OtherObject.Name == "Player")
        {
            var playerPush = Real2(-10,-10);
            event.OtherObject.PlayerController.StunPlayer(0.4);//seconds player pushed
            if (this.PlayerPosition.X>0)
            {
                if (this.TypeOfEnemy == "Cat" || this.TypeOfEnemy == "Mushroom")
                {
                    playerPush.X=7;
                }
                else if (this.TypeOfEnemy == "Pig")
                {
                    playerPush.X=11;
                }
            }
            if (this.PlayerPosition.Y>0)
            {
                if (this.TypeOfEnemy == "Cat" || this.TypeOfEnemy == "Mushroom")
                {
                    playerPush.Y=7;
                }
                else if (this.TypeOfEnemy == "Pisg")
                {
                    playerPush.Y=11;
                }
            }
            event.OtherObject.RigidBody.ApplyLinearImpulse(Real3(playerPush.X,playerPush.Y,0));
            //this.PlayerCog.RigidBody.ApplyLinearImpulse(Real3(1000,1000,0));
            //this.PlayerCog.PlayerController.MoveVec=Real3(this.Owner.Transform.Translation.X+(this.PlayerPosition.X*2),this.Owner.Transform.Translation.Y+(this.PlayerPosition.Y*2),0);            
            this.PlayerCog.PlayerController.CurentHP -= 1;//int for taking damag, set to a var to costomize based on enemy
            // here's some code for updating the HUD
            // signed, Ralph
            var hudParent : Cog = this.Space.FindObjectByName( "Camera" );
            var hud : Cog = hudParent.FindChildByName( "HudContainer" );
            hud.HUDController.UpdateHealth( event.OtherObject );
        }
        
        if (!this.IsEnemyStun){
            if (event.OtherObject.Name == "SlingShotProject"&&event.OtherObject.SlingProjControler.Pickup==false)
            {
                this.HP-=this.PlayerCog.PlayerController.Pjtl_Damage;
                this.StunEnemy(0.3);
            }
        }
    }    
    function UpdateFacingInput()
    {
        if (this.Ang>1&&this.Ang<2&&this.Ang!=0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatN");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigN");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomN");//Sets Sprite
            }
        
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
        }
        //Nort East
        if (this.Ang<1&&this.Ang>0.5&&this.Ang!=0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatNW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigNW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomNW");//Sets Sprite
            }
            
            this.Owner.Sprite.FlipX=true;//Resets mirror flip to off
        }
        //East
        if (this.Ang>-0.5&&this.Ang<0.5&&this.Ang!=0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatW");
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomW");//Sets Sprite
            }
            
            this.Owner.Sprite.FlipX=true;//Resets mirror flip to off
        }
        //South East
        if (this.Ang<-0.5&&this.Ang>-1&&this.Ang!=0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatSW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigSW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomSW");//Sets Sprite
            }
            
            this.Owner.Sprite.FlipX=true;//Resets mirror flip to off
        }
        //South
        if (this.Ang<-1&&this.Ang>-2&&this.Ang!=0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatS");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigS");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomS");//Sets Sprite
            }
            
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
        }
        //South West
        if (this.Ang<-2&&this.Ang>-2.6&&this.Ang!=0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatSW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigSW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomSW");//Sets Sprite
            }
            
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to on
        }
        //West
        if (this.Ang<-2.6||this.Ang>2.6&&this.Ang!=0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomW");//Sets Sprite
            }
            
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to on
        }
        //North West
        if (this.Ang<2.6&&this.Ang>2&&this.Ang!=0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatNW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigNW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomNW");//Sets Sprite
            }
            
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to on
        }
    }
    
    function UpdateEnemyMovement()//Updates Ang based on Player location
    {
        if (!this.IsEnemyStun && this.Active && !(this.TypeOfEnemy == "Pig" && this.PigAttacking))
        {
            this.PlayerPosition = Real3(this.PlayerCog.Transform.Translation.X-this.Owner.Transform.Translation.X,//Get Player's X relative to the Enemy
                this.PlayerCog.Transform.Translation.Y-this.Owner.Transform.Translation.Y, //Get Player's Y relative to the Enemy
                1); //going towards the player
            this.Ang = Math.Angle2D(this.PlayerPosition);
            this.Move(this.PlayerPosition);
        }
        else
        {
            this.Owner.RigidBody.Velocity = Real3(0, 0, 0);
        }
    }
    
    function Move(moveR3 : Real3)
    {
        //Applies linear impulse based on movespeed and the given vector
        if (this.TypeOfEnemy == "Cat")
        {        
            if (this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty >= 2 && this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty <= 5)
            {
                this.RandomSpeed = this.RandomGenerator.Range(
                                    ( (this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty) / 2 ),
                                    ( 3 * (this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty) / 2 )
                                    );
            //sets the randomSpeed to a number between the (LD * DD)/2 and 3(LD * DD)/2)
            }
            else if (this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty < 2) 
            //this else statement is here to make sure that the set speed isn't halfed or anything.
            {
                this.RandomSpeed = this.RandomGenerator.Range(1, 1.5);
            }
            else
            {
                this.RandomSpeed = this.RandomGenerator.Range(2.5, 5);
            }
            this.MoveSpeed = this.RandomSpeed + this.StartingMoveSpeed;
            this.Owner.RigidBody.ApplyLinearImpulse(moveR3 * this.MoveSpeed);
            //Console.WriteLine(this.MoveSpeed);
        }
        else if (this.TypeOfEnemy == "Pig")
        {
            this.Owner.RigidBody.ApplyLinearImpulse(moveR3 * this.MoveSpeed);
            //Console.WriteLine(this.MoveSpeed);
        }
        else if (this.TypeOfEnemy == "Mushroom")
        {
            this.MoveSpeed = 0;
            //Console.WriteLine(this.MoveSpeed);
        }
        
        this.Owner.RigidBody.Velocity = Math.Normalize(this.Owner.RigidBody.Velocity);
        this.Owner.RigidBody.Velocity *= this.MoveSpeed;
    }
    
    function StunEnemy(time : Real)
    {
        this.Owner.Sprite.Color=Real4(1,255,255,1);
        this.IsEnemyStun = true;
        var seq = Action.Sequence(this.Owner.Actions);
        if (this.TypeOfEnemy == "Pig")
        {
            time /= 3;
        }
        Actions.Delay(seq, time);   //delays the program for a certain amount of seconds
        Actions.Call(seq, this.RemoveStun);
    }
    
    function RemoveStun()
    {
        this.Owner.Sprite.Color=Real4(1,1,1,1);
        this.IsEnemyStun = false;
    }
    
    function PigDistanceFromPlayer()
    {
        if (!this.PigAttacking)
        {
            var x = this.PlayerCog.Transform.Translation.X-this.Owner.Transform.Translation.X;
            var y = this.PlayerCog.Transform.Translation.Y-this.Owner.Transform.Translation.Y;
            var dist = Math.Sqrt(x * x + y * y);
            if (dist <= 1)
            {
                //this.PigAttacking = true;
                //this.PigSwordSlash();
            }
            Console.WriteLine(dist);
        }
    }
        /*function PigSwordSlash()
        {
            this.PigDamageBox.Transform.Translation = this.AttackZone;
            this.PigDamageBox.Sprite.Visible=true;
            this.PigDamageBox.BoxCollider.SendsEvents=true;
            var seq = Action.Sequence(this.Owner.Actions);
            Actions.Delay(seq, 0.1);
            Actions.Call(seq, this.DeSlash);
        }
        
    function DeSlash()
        {
            this.PigDamageBox.Sprite.Visible=false;
            this.PigDamageBox.BoxCollider.SendsEvents=false;
        }*/ //come back to this please -Dylan
    
    function MushroomShooting()
    {
            
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.UpdateFacingInput();
        this.UpdateEnemyMovement();
        if (this.TypeOfEnemy == "Pig")
        {
            this.PigDistanceFromPlayer();
        }
        if (this.TypeOfEnemy == "Mushroom" )
        {
            this.MushroomShooting();
        }
        
        if (this.InitializeHP == true)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.HP = (this.DefaultHP / 2 * this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty) as Integer;
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.HP = (this.DefaultHP * 2 * this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty) as Integer;
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.HP = (this.DefaultHP * this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty) as Integer;
            }
            this.InitializeHP = false;
            
            //Console.WriteLine(this.HP);                                           //used for decoding
            //Console.WriteLine(this.LevelCog.LevelController.DynamicDifficulty);   //used for decoding
        }
        
        if (this.HP<=0) //this kills the player after its HP hits 0 and drops a "rock"
        {
            this.Space.CreateAtPosition(this.DeathParticleArche, this.Owner.Transform.Translation);//makes a partical efect on death
            this.Space.CreateAtPosition(this.Drop, this.Owner.Transform.Translation);
            this.LevelCog.LevelController.DynamicDifficulty += 0.01;
            this.Owner.Destroy();
        }
    }
}