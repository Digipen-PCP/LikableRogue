class EnemyController : ZilchComponent
{
    var Check : Boolean = false;
    
    [Property]
    var PigDamageBoxArch : Archetype = null;
    var PigAttacking : Boolean = false;
    var PigSlashZone : Real3 = Real3(0,-1,0);
    var PigDamageBoxCog : Cog = null;
    
    [Property]
    var MushroomShotArch : Archetype = null;
    var MushroomAttacking : Boolean = false;
    var MushroomShotAngle : Integer;
    
    var TypeOfEnemy : String; //Cat, Pig, Mushroom
    /*if (this.TypeOfEnemy == "Cat")
    {
    
    }
    else if (this.TypeOfEnemy == "Pig")
    {
        
    }
    else if (this.TypeOfEnemy == "Mushroom")
    {
        
    }*/
    [Property]
    var ActTextArch : Archetype = null;
    var Active : Boolean = true; //Use this when programming when the Enemy is moving or not
    
    var IsEnemyStun : Boolean = false;
    
    var RandomGenerator : Random = Random();
    var RandomSpeed : Real;
    var RandomDrop: Integer;
    
    var Ang : Real = 0;
    var PlayerPosition : Real3 = Real3(0,0,0);
    
    var PlayerCog : Cog = null;
    var LevelCog : Cog = null;

    [Property]
    var DefaultHP : Real = 5;
    var HP : Real;
    var InitializeHP : Boolean = true;
    
    [Property]
    var StartingMoveSpeed : Real;
    var MoveSpeed : Real;
    
    [Property]
    var Drop : Archetype = null;
    [Property]
    var DeathParticleArche : Archetype = null;
    
    function Initialize(init : CogInitializer)
    {
        this.MoveSpeed = this.StartingMoveSpeed;
        this.PlayerCog = this.Space.FindObjectByName("Player");
        this.LevelCog = this.Space.FindObjectByName("LevelManager");
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        //for dealing damage to the enemy
        if (event.OtherObject.Name == "Player")
        {
            var playerPush = Real2(-10,-10);
            event.OtherObject.PlayerController.StunPlayer(0.4);//seconds player pushed
            if (this.PlayerPosition.X>0)
            {
                if (this.TypeOfEnemy == "Cat" || this.TypeOfEnemy == "Mushroom")
                {
                    playerPush.X=7;
                }
                else if (this.TypeOfEnemy == "Pig")
                {
                    playerPush.X=11;
                }
            }
            if (this.PlayerPosition.Y>0)
            {
                if (this.TypeOfEnemy == "Cat" || this.TypeOfEnemy == "Mushroom")
                {
                    playerPush.Y=7;
                }
                else if (this.TypeOfEnemy == "Pig")
                {
                    playerPush.Y=11;
                }
            }
            event.OtherObject.RigidBody.ApplyLinearImpulse(Real3(playerPush.X,playerPush.Y,0));
            //this.PlayerCog.RigidBody.ApplyLinearImpulse(Real3(1000,1000,0));
            //this.PlayerCog.PlayerController.MoveVec=Real3(this.Owner.Transform.Translation.X+(this.PlayerPosition.X*2),this.Owner.Transform.Translation.Y+(this.PlayerPosition.Y*2),0);            
            this.PlayerCog.PlayerController.CurentHP -= 1;//int for taking damag, set to a var to costomize based on enemy
            // here's some code for updating the HUD
            // signed, Ralph
            // thank you! - Dylan
            var hudParent : Cog = this.Space.FindObjectByName( "Camera" );
            var hud : Cog = hudParent.FindChildByName( "HudContainer" );
            hud.HUDController.UpdateHealth( event.OtherObject );
        }
        
        if (!this.IsEnemyStun){
            if (event.OtherObject.Name == "SlingShotProject"&&event.OtherObject.SlingProjControler.Pickup==false)
            {
                //ActionTxtCreate
                this.Space.CreateAtPosition(this.ActTextArch, event.OtherObject.Transform.Translation);
                var cog = this.Space.FindObjectByName("ActText");
                cog.SpriteText.Color=Real4(1,0,0,1);
                cog.SpriteText.Text="-`this.PlayerCog.PlayerController.Pjtl_Damage`";
                
                this.HP-=this.PlayerCog.PlayerController.Pjtl_Damage;
                this.StunEnemy(0.3);
            }
        }
    }    
    function UpdateFacingInput()
    {
        this.Owner.Sprite.Visible = true;
        
        //East (Mushroom)
        if (this.Ang > -0.5 && this.Ang < 0.5 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomW");//Sets Sprite
                this.MushroomShotAngle = 0;
                this.Owner.Sprite.FlipX=true;//Resets mirror flip to off
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.PigSlashZone = Real3(1,0,0);
            }
        }
        
        //North East (Mushroom)
        if (this.Ang < 1 && this.Ang > 0.5 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomNW");//Sets Sprite
                this.MushroomShotAngle = 1;
                this.Owner.Sprite.FlipX=true;//Resets mirror flip to off
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.PigSlashZone = Real3(1,1,0);
            }
        }
        
        //North (Mushroom)
        if (this.Ang > 1 && this.Ang < 2 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomN");//Sets Sprite
                this.MushroomShotAngle = 2;
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.PigSlashZone = Real3(0,1,0);
            }
        }
        
        //North West (Mushroom)
        if (this.Ang < 2.6 && this.Ang > 2 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomNW");//Sets Sprite
                this.MushroomShotAngle = 3;
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to on
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.PigSlashZone = Real3(-1,1,0);
            }
        }
        
        //West (Mushroom)
        if (this.Ang < -2.6||this.Ang > 2.6 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomW");//Sets Sprite
                this.MushroomShotAngle = 4;
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to on
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.PigSlashZone = Real3(-1,0,0);
            }
        }
        
        //South West (Mushroom)
        if (this.Ang < -2 && this.Ang > -2.6 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomSW");//Sets Sprite
                this.MushroomShotAngle = 5;
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to on
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.PigSlashZone = Real3(-1,-1,0);
            }
        }
        
        //South (Mushroom)
        if (this.Ang < -1 && this.Ang > -2 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomS");//Sets Sprite
                this.MushroomShotAngle = 6;
                this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.PigSlashZone = Real3(0,-1,0);
            }
        }
        
        //South East (Mushroom)
        if (this.Ang < -0.5 && this.Ang > -1 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Mushroom")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomSW");//Sets Sprite
                this.MushroomShotAngle = 7;
                this.Owner.Sprite.FlipX=true;//Resets mirror flip to off
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.PigSlashZone = Real3(1,-1,0);
            }
        }
        
        //East (Cat and Pig)
        if (this.Ang > -0.8 && this.Ang < 0.8 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatW");
            }
            else if (this.TypeOfEnemy == "Pig" && !this.PigAttacking)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigW");
            }
            this.Owner.Sprite.FlipX=true;//Resets mirror flip to off
        }
        
        //North (Cat and Pig)
        if (this.Ang > 0.8 && this.Ang < 2.4 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatN");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig" && !this.PigAttacking)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigN");//Sets Sprite
            }
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
        }
            
        //West (Cat and Pig)
        if (this.Ang < -2.4 || this.Ang > 2.4 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatW");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig" && !this.PigAttacking)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigW");//Sets Sprite
            }
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
        }
            
        //South (Cat and Pig)
        if (this.Ang < -0.8 && this.Ang > -2.6 && this.Ang != 0)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatS");//Sets Sprite
            }
            else if (this.TypeOfEnemy == "Pig" && !this.PigAttacking)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigS");//Sets Sprite
            }
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
        }
        
    }
    
    function UpdateEnemyMovement()//Updates Ang based on Player location
    {
        if (!this.IsEnemyStun && this.Active && !(this.TypeOfEnemy == "Pig" && this.PigAttacking))
        {
            this.PlayerPosition = Real3(this.PlayerCog.Transform.Translation.X-this.Owner.Transform.Translation.X,//Get Player's X relative to the Enemy
                this.PlayerCog.Transform.Translation.Y-this.Owner.Transform.Translation.Y, //Get Player's Y relative to the Enemy
                1); //going towards the player
            this.Ang = Math.Angle2D(this.PlayerPosition);
            this.Move(this.PlayerPosition);
        }
        else
        {
            this.Owner.RigidBody.Velocity = Real3(0, 0, 0);
        }
    }
    
    function Move(moveR3 : Real3)
    {
        //Applies linear impulse based on movespeed and the given vector
        if (this.TypeOfEnemy == "Cat")
        {        
            if (this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty >= 2 && this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty <= 5)
            {
                this.RandomSpeed = this.RandomGenerator.Range(
                                    ( (this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty) / 2 ),
                                    ( 3 * (this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty) / 2 )
                                    );
            //sets the randomSpeed to a number between the (LD * DD)/2 and 3(LD * DD)/2)
            }
            else if (this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty < 2) 
            //this else statement is here to make sure that the set speed isn't halfed or anything.
            {
                this.RandomSpeed = this.RandomGenerator.Range(1, 1.5);
            }
            else
            {
                this.RandomSpeed = this.RandomGenerator.Range(2.5, 5);
            }
            this.MoveSpeed = this.RandomSpeed + this.StartingMoveSpeed;
            this.Owner.RigidBody.ApplyLinearImpulse(moveR3 * this.MoveSpeed);
            //Console.WriteLine(this.MoveSpeed);
        }
        else if (this.TypeOfEnemy == "Pig")
        {
            this.Owner.RigidBody.ApplyLinearImpulse(moveR3 * this.MoveSpeed);
            //Console.WriteLine(this.MoveSpeed);
        }
        else if (this.TypeOfEnemy == "Mushroom")
        {
            this.MoveSpeed = 0;
            //Console.WriteLine(this.MoveSpeed);
        }
        
        this.Owner.RigidBody.Velocity = Math.Normalize(this.Owner.RigidBody.Velocity);
        this.Owner.RigidBody.Velocity *= this.MoveSpeed;
    }
    
    function StunEnemy(time : Real)
    {
        this.Owner.Sprite.Color=Real4(1,255,255,1);
        this.IsEnemyStun = true;
        var seq = Action.Sequence(this.Owner.Actions);
        if (this.TypeOfEnemy == "Pig")
        {
            time /= 3;
        }
        Actions.Delay(seq, time);   //delays the program for a certain amount of seconds
        Actions.Call(seq, this.RemoveStun);
    }
    
    function RemoveStun()
    {
        this.Owner.Sprite.Color=Real4(1,1,1,1);
        this.IsEnemyStun = false;
    }
    
    function PigDistanceFromPlayer()
    {
        if (!this.PigAttacking)
        {
            var x = this.PlayerCog.Transform.Translation.X-this.Owner.Transform.Translation.X;
            var y = this.PlayerCog.Transform.Translation.Y-this.Owner.Transform.Translation.Y;
            var dist = Math.Sqrt(x * x + y * y);
            if (dist <= 1.5)
            {
                this.PigAttacking = true;
                this.PigSlashSword();
            }
            //Console.WriteLine(dist);  //decoding
        }
    }
    
    function PigSlashSword()
    {
        //Console.WriteLine("Creating attack"); //decoding
        
        //this.PigSlashZone = Real3(1,0,0); //for reference (SlashZone is East)
        
        if (this.PigSlashZone == Real3(1, 0, 0))
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigW");
            this.Owner.Sprite.FlipX=true;
        }
        else if (this.PigSlashZone == Real3(1, 1, 0))
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigNW");
            this.Owner.Sprite.FlipX=true;
        }
        else if (this.PigSlashZone == Real3(0, 1, 0))
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigN");
            this.Owner.Sprite.FlipX=false;
        }
        else if (this.PigSlashZone == Real3(-1, 1, 0))
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigNW");
            this.Owner.Sprite.FlipX=false;
        }
        else if (this.PigSlashZone == Real3(-1, 0, 0))
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigW");
            this.Owner.Sprite.FlipX=false;
        }
        else if (this.PigSlashZone == Real3(-1, -1, 0))
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigSW");
            this.Owner.Sprite.FlipX=false;
        }
        else if (this.PigSlashZone == Real3(0, -1, 0))
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigS");
            this.Owner.Sprite.FlipX=false;
        }
        else if (this.PigSlashZone == Real3(1, -1, 0))
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigSW");
            this.Owner.Sprite.FlipX=true;
        }
        
        var createdPosition = Real3(this.PigSlashZone.X + this.Owner.Transform.Translation.X, this.PigSlashZone.Y + this.Owner.Transform.Translation.Y, 0);
        this.Space.CreateAtPosition(this.PigDamageBoxArch, createdPosition);
        
        this.PigDamageBoxCog = this.Space.FindObjectByName("PigSlashDamagBox");
        this.PigDamageBoxCog.PigSwordController.WillHurt = false;
        
        var seq = Action.Sequence(this.Owner.Actions);
        Actions.Delay(seq, 0.5);
        Actions.Call(seq, this.PigSlashHurt);
    }
        
    function PigSlashHurt()
    {
        //Console.WriteLine("Swung!"); //decoding
        
        this.PigDamageBoxCog.PigSwordController.WillHurt = true;
        var seq = Action.Sequence(this.Owner.Actions);
        Actions.Delay(seq, 0.5);
        Actions.Call(seq, this.PigDestroyAttackBox);
    }
    
    function PigDestroyAttackBox()
    {
        this.PigDamageBoxCog.PigSwordController.PleaseKillMe = true;
        this.PigAttacking = false;
    }
    
    function MushroomShooting()
    {
        this.Space.CreateAtPosition(this.MushroomShotArch,
            Real3(this.Owner.Transform.Translation.X, this.Owner.Transform.Translation.Y, 0));
        var shotCog = this.Space.FindObjectByName("MushroomShot");
        shotCog.MushroomShotController.Angle = Math.ToRadians(this.MushroomShotAngle * 45);

        //recursion yo'
        var seq = Action.Sequence(this.Owner.Actions);
        var time = 4 - (this.LevelCog.LevelController.LevelDifficulty + this.LevelCog.LevelController.DynamicDifficulty) / 4;
        Actions.Delay(seq, time);
        Actions.Call(seq, this.MushroomShooting);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.UpdateFacingInput();
        this.UpdateEnemyMovement();
        
        //Cat check
        if (this.TypeOfEnemy == "Cat"&& !this.Check)
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("CatS");
            this.Check = true;
        }
        
        //Pig check
        if (this.TypeOfEnemy == "Pig" && !this.Check)
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("PigS");
            this.Check = true;
        }
        else if (this.TypeOfEnemy == "Pig")
        {
            this.PigDistanceFromPlayer();
        }
        
        //Mushroom check
        if (this.TypeOfEnemy == "Mushroom" && !this.Check)
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("MushroomS");
            var seq = Action.Sequence(this.Owner.Actions);
            var time = 4 - (this.LevelCog.LevelController.LevelDifficulty + this.LevelCog.LevelController.DynamicDifficulty) / 4;
            Actions.Delay(seq, time);
            Actions.Call(seq, this.MushroomShooting);
            this.Check = true;
        }
        
        //Health set
        if (this.InitializeHP == true)
        {
            if (this.TypeOfEnemy == "Cat")
            {
                this.HP = (this.DefaultHP / 2 * this.LevelCog.LevelController.DynamicDifficulty + this.LevelCog.LevelController.LevelDifficulty) as Integer;
            }
            else if (this.TypeOfEnemy == "Pig")
            {
                this.HP = (this.DefaultHP * 2 * this.LevelCog.LevelController.DynamicDifficulty + this.LevelCog.LevelController.LevelDifficulty) as Integer;
            }
            else if (this.TypeOfEnemy == "Mushroom")
            {
                this.HP = (this.DefaultHP * this.LevelCog.LevelController.DynamicDifficulty + this.LevelCog.LevelController.LevelDifficulty) as Integer;
            }
            this.InitializeHP = false;
            
            //Console.WriteLine(this.HP);                                           //used for decoding
            //Console.WriteLine(this.LevelCog.LevelController.DynamicDifficulty);   //used for decoding
        }
        
        if (this.HP<=0) //this kills the player after its HP hits 0 and drops a "rock"
        {
            this.Space.CreateAtPosition(this.DeathParticleArche, this.Owner.Transform.Translation);//makes a partical efect on death
            this.Space.CreateAtPosition(this.Drop, this.Owner.Transform.Translation);
            this.LevelCog.LevelController.DynamicDifficulty += 0.01;
            if (this.TypeOfEnemy == "Pig" && this.PigAttacking)
            {
                this.PigDamageBoxCog.PigSwordController.PleaseKillMe = true;
            }
            this.Owner.Destroy();
        }
    }
}