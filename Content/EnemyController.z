class EnemyController : ZilchComponent
{
    var Ang : Real = 0;
    var PlayerCog : Cog = null;
    var LevelCog : Cog = null;
    var PlayerPosition : Real3 = Real3(0,0,0);

    [Property]
    var HP : Real;
    var StartingHP : Real;
    
    [Property]
    var MoveSpeed : Real = 1;
    [Property]
    var Drop1: Archetype = null;
    
    function Initialize(init : CogInitializer)
        {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.PlayerCog = this.Space.FindObjectByName("Player");
        this.LevelCog = this.Space.FindObjectByName("LevelManager");
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        this.StartingHP = this.HP;
        }
    
    function OnCollisionStarted(event : CollisionEvent)
        {
        if (event.OtherObject.Name == "Player")
            {
            this.PlayerCog.PlayerController.Health -= 1;//int for taking damag, set to a var to costomize based on enemy
            }
        if (event.OtherObject.Name == "SlingShotProject")
            {
            this.HP-=1;
            }
        }
    
    function UpdateFacingInput()
    {
//North
        if (this.Ang>0.79&&this.Ang<1.57&&this.Ang!=0)
            {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_enemyN");//Sets Sprite
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
            }
        //East
        if (this.Ang>-0.79&&this.Ang<0.79&&this.Ang!=0)
            {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_enemyE");
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
            }
        //South
        if (this.Ang<-0.79&&this.Ang>-1.57&&this.Ang!=0)
            {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerS");//Sets Sprite
            this.Owner.Sprite.FlipX=false;//Resets mirror flip to off
            }
        //West
        if (this.Ang>2.36||this.Ang<-2.36&&this.Ang!=0)
            {
            this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_playerE");//Sets Sprite
            this.Owner.Sprite.FlipX=true;//Resets mirror flip to on
            }
    }
    
    function UpdateEnemyMovement(hurt : Integer)//Updates Ang based on Player location
    {
        if (hurt == 0)
            this.PlayerPosition = Real3(this.PlayerCog.Transform.Translation.X-this.Owner.Transform.Translation.X,//Get Player's X relative to the Enemy
                this.PlayerCog.Transform.Translation.Y-this.Owner.Transform.Translation.Y, //Get Player's Y relative to the Enemy
                1); //going towards the player
        else
            this.PlayerPosition = Real3(this.Owner.Transform.Translation.X-this.PlayerCog.Transform.Translation.X,//Get Player's X relative to the Enemy
                this.Owner.Transform.Translation.Y-this.PlayerCog.Transform.Translation.Y, //Get Player's Y relative to the Enemy
                1); //going away from the player
        this.Ang = Math.Angle2D(this.PlayerPosition);
        this.Move(this.PlayerPosition);
    }
    
        function Move(moveR3 : Real3)
    {
        //Applies linear impulse based on movespeed and the given vector
        this.Owner.RigidBody.ApplyLinearImpulse(moveR3 * this.MoveSpeed);
        this.Owner.RigidBody.Velocity = Math.Normalize(this.Owner.RigidBody.Velocity);
        this.Owner.RigidBody.Velocity *= this.MoveSpeed;
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        if (this.HP<=0) //this kills the player after its HP hits 0 and drops a "rock"
        {
            this.Space.CreateAtPosition(this.Drop1, this.Owner.Transform.Translation);            
            this.Owner.Destroy();
        }
        this.UpdateFacingInput();
        /*Console.WriteLine(this.StartingHP);
        Console.WriteLine(this.HP);
        Console.WriteLine(this.LevelCog.LevelController.DynamicDifficulty);*/   //used for decoding
        if (this.HP > (1/(2 * this.LevelCog.LevelController.LevelDifficulty * this.LevelCog.LevelController.DynamicDifficulty) * this.StartingHP))
        //this (above) is going to check if the current HP is > the StartingHP divided by (2*LevelDifficulty*DynamicDifficulty)
            this.UpdateEnemyMovement(0); //when this is sent, the enemy will move towards the player
        else
            this.UpdateEnemyMovement(1); //when this is sent, the enemy will "run" away from the player
    }
}