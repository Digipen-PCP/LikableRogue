class HUDController : ZilchComponent
{
    // the cog we'll be modifying 
    [Property]
    var HeartArchetype : Archetype      = null;
    // sprites to display
    [Property]
    var WholeHeartSprite : SpriteSource = null;
    [Property]
    var HalfHeartSprite : SpriteSource  = null;
    [Property]
    var NoHeartSprite : SpriteSource    = null;
    
    // we'll use this for debugging, maybe carry it over into production
    //[Property]
    var HealthSpriteAnchor : Real3 = Real3( 0, 0, 0 );
    
    // the player cog
    // we'll fill this in during init
    var PlayerCog : Cog = null;
    
    // because I got a nullReferenceException
    var MaxPlayerHP : Integer = 4; 
    var HPSetupDone : Boolean = false;
    
    // an array of the cogs we'll manipulate to display health
    var HPCogs : Array[Cog] = Array[Cog]();
    
    // HPLable - we'll use this for positioning
    var HPLabel : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        // initialize the variable we need later in the Init function
        this.HPLabel    = this.Owner.FindChildByName( "HPLabel" );
        
        this.HealthSpriteAnchor = Real3( this.HPLabel.Transform.Translation.X + 0.5, 
                                         this.HPLabel.Transform.Translation.Y - 0.55, 
                                         this.HPLabel.Transform.Translation.Z );
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        // check to make sure we're not referencing a null object
        if ( this.PlayerCog != null )
        {
            // should we set up the HP?
            if ( this.HPSetupDone == false )
            {
                // we're setting yup health instead of updating it
                for ( var hp : Integer = 1; hp <= (this.PlayerCog.PlayerController.MaxHP / 2); ++hp )
                {
                    // create the sprite, then parent it to the HUD controller
                    var healthSprite = this.Space.CreateAtPosition( this.HeartArchetype, Real3( 0, 0, 0 ) );
                    healthSprite.AttachTo( this.Owner );
                    // TODO: change the sprite source instead of the color
                    //healthSprite.Sprite.SpriteSource = this.WholeHeartSprite;
                    healthSprite.Sprite.Color = Real4( 1.0, 0, 0, 1.0 );
                    
                    // set the new position for the sprite
                    healthSprite.Transform.Translation = this.HealthSpriteAnchor;
                    // increment the X value of where we'll place the next sprite
                    this.HealthSpriteAnchor.X += 0.75;
                }
                //this.UpdateHealth( this.PlayerCog );
                
                // HP setup is now done.
                this.HPSetupDone = true;
            }
            // if HP's already been set up, we want to modify it based off of the player's current stats
            
            else
            {
                /*
                foreach ( var hpSprite in this.HPArray )
                {
                    hpSprite = null;
                }
                
                // we want the following specs for each HP:
                // if we have 2 HP, that sprite is this.WholeHeartSprite
                // if we have 1 HP, that sprite is this.HalfHeartSprite
                // if we have 0 HP, that sprite is this.NoHeartSprite
                // we can calculate this based off of this.PlayerCog.PlayerController.MaxHP and .CurrentHP
                
                // calculate the current difference between current and max HP
                var hpDiff : Integer = this.PlayerCog.PlayerController.MaxHP - this.PlayerCog.PlayerController.MaxHP;
                // in this case we won't need a half heart
                if ( hpDiff % 2 == 0 )
                {
                    for ( var hp : Integer = 1; hp <= (this.PlayerCog.PlayerController.CurentHP / 2); ++hp )
                    {
                        if ( hp <= this.PlayerCog.PlayerController.CurentHP )
                        {
                            // create the sprite, then parent it to the HUD controller
                            var healthSprite = this.Space.CreateAtPosition( this.WholeHeartSprite, Real3( 0, 0, 0 ) );
                            healthSprite.AttachTo( this.Owner );
                            
                            // set the new position for the sprite
                            healthSprite.Transform.Translation = this.HealthSpriteAnchor;
                            // increment the X value of where we'll place the next sprite
                            this.HealthSpriteAnchor.X += 0.75;
                        }
                        else
                        {
                            // create the sprite, then parent it to the HUD controller
                            var healthSprite = this.Space.CreateAtPosition( this.NoHeartSprite, Real3( 0, 0, 0 ) );
                            healthSprite.AttachTo( this.Owner );
                            
                            // set the new position for the sprite
                            healthSprite.Transform.Translation = this.HealthSpriteAnchor;
                            // increment the X value of where we'll place the next sprite
                            this.HealthSpriteAnchor.X += 0.75;
                        }
                    }
                }
                // in this case, we will need a half heart
                else
                {
                    for ( var hp : Integer = 1; hp <= this.PlayerCog.PlayerController.CurentHP; ++hp )
                    {
                        return;
                    }
                }*/
            }
        }
        // if we are referencing a null object, try to fill the object 
        else 
        {
            this.PlayerCog  = this.Space.FindObjectByName( "Player" );
        }
    }
    
    function UpdateHealth ( player : Cog )
    {
        // reset sprite creation location
        this.HealthSpriteAnchor = Real3( this.HPLabel.Transform.Translation.X + 0.5, 
                                         this.HPLabel.Transform.Translation.Y - 0.55, 
                                         this.HPLabel.Transform.Translation.Z );
        
        
        // TODO: Iron out this logic
        var hpDiff : Integer = player.PlayerController.MaxHP - player.PlayerController.CurentHP;
        
        for ( var hp : Integer = 1; hp <= (player.PlayerController.MaxHP / 2); ++hp )
        {
            //Console.WriteLine( "UpdateHealth(): hp        = `hp`." );
            //Console.WriteLine( "UpdateHealth(): CurrentHP = `player.PlayerController.CurentHP`." );
            //Console.WriteLine( "UpdateHealth(): MaxHP     = `player.PlayerController.MaxHP`." );
            
            var allHealthSprites : HierarchyNameRange = this.Owner.FindAllChildrenByName( "HeartArchetype" );
            var healthSpritesDone : Integer = 0;
            foreach ( var sprite : Cog in allHealthSprites )
            {
                if ( hp <= (player.PlayerController.CurentHP / 2) ) // if hp is less than the current hp (i.e. we have hearts here)
                {
                    ++healthSpritesDone;
                    Console.WriteLine( "HealthSpritesDone == `healthSpritesDone`" );
                    Console.WriteLine( "        CurrentHP == `player.PlayerController.CurentHP`");
                    Console.WriteLine( "               hp == `hp`" );
                    if ( hp < healthSpritesDone )
                    {
                        if ( (player.PlayerController.CurentHP % 2 == 1) && (player.PlayerController.CurentHP / 2 == healthSpritesDone) )
                        {
                            Console.WriteLine( "I should make an orange heart." );
                            sprite.Sprite.Color = Real4( 1.0, 0.5, 0.0, 1.0 ); // orange, half a heart
                        }
                        else
                        {
                            Console.WriteLine( "I should make a red heart" );
                            sprite.Sprite.Color = Real4( 1.0, 1.0, 1.0, 0.25 ); // red, a whole heart
                        }
                    }
                    else
                    {
                        Console.WriteLine( "I should make an empty heart" );
                        sprite.Sprite.Color = Real4( 1.0, 0.0, 0.0, 1.0 ); // grey, no heart
                    }
                }
            }
        }
        Console.WriteLine();
    }
}
