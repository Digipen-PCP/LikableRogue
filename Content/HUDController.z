class HUDController : ZilchComponent
{
    // the cog we'll be modifying 
    [Property]
    var HeartArchetype : Archetype      = null;
    // sprites to display
    [Property]
    var WholeHeartSprite : SpriteSource = null;
    [Property]
    var HalfHeartSprite : SpriteSource  = null;
    [Property]
    var NoHeartSprite : SpriteSource    = null;
    
    // the anchor for creating sprites and health
    var HealthSpriteAnchor : Real3 = Real3( 0, 0, 0 );
    
    // the player cog
    // we'll fill this in during init
    var PlayerCog : Cog = null;
    
    // because I got a nullReferenceException
    var MaxPlayerHP : Integer = 4; 
    var HPSetupDone : Boolean = false;
    
    // an array of the cogs we'll manipulate to display health
    var HPCogs : Array[Cog] = Array[Cog]();
    
    // HPLable - we'll use this for positioning
    var HPLabel : Cog = null;
    // AmmoLable - we'll use this for positioning as well
    var AmmoLabel : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        // initialize the variable we need later in the Init function
        this.HPLabel    = this.Owner.FindChildByName( "HPLabel" );
        this.AmmoLabel  = this.Owner.FindChildByName( "AmmoLabel" );
        
        this.HealthSpriteAnchor = Real3( this.HPLabel.Transform.Translation.X + 0.5, 
                                         this.HPLabel.Transform.Translation.Y - 0.5, 
                                         this.HPLabel.Transform.Translation.Z );
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        // check to make sure we're not referencing a null object
        if ( this.PlayerCog != null )
        {
            // should we set up the HP?
            if ( this.HPSetupDone == false )
            {
                // we're setting yup health instead of updating it
                for ( var hp : Integer = 1; hp <= (this.PlayerCog.PlayerController.MaxHP / 2); ++hp )
                {
                    // create the sprite, then parent it to the HUD controller
                    var healthSprite = this.Space.CreateAtPosition( this.HeartArchetype, Real3( 0, 0, 0 ) );
                    healthSprite.AttachTo( this.Owner );
                    healthSprite.Sprite.SpriteSource = this.WholeHeartSprite;
                    healthSprite.Sprite.Color = Real4( 1.0, 1.0, 1.0, 1.0 );
                    
                    // set the new position for the sprite
                    healthSprite.Transform.Translation = this.HealthSpriteAnchor;
                    // increment the X value of where we'll place the next sprite
                    this.HealthSpriteAnchor.X += 0.75;
                }
                
                // HP setup is now done.
                this.HPSetupDone = true;
            }
            
            // update the ammo
            this.UpdateAmmo( this.PlayerCog.PlayerController.MaxProjec - this.PlayerCog.PlayerController.CurentProject + 1 );
        }
        // if we are referencing a null object, try to fill the object 
        else 
        {
            this.PlayerCog  = this.Space.FindObjectByName( "Player" );
        }
    }
    
    function UpdateHealth ( player : Cog )
    {
        // find every sprite that was or has been created
        var allHealthSprites  : HierarchyNameRange = this.Owner.FindAllChildrenByName( "HeartArchetype" );
        // we increment this in the foreach loop so it works like a for loop
        // this variable works inversely in the if statements.
        var healthSpritesDone : Integer = 0;
        // so we only create one "half heart"
        var halfHeartCreated  : Boolean = false;
        
        foreach ( var sprite : Cog in allHealthSprites )
        {
            // increment this first so we don't divide by 0
            ++healthSpritesDone;
            // - we check if the current hp / 2 is less than how many health sprites we have done
            // - we divide CurrentHP by two because we have one sprite for every two hit points
            // - we check to see if it's less than the current sprites done because, if it isn't, we need
            //   to create an empty heart instead
            if ( player.PlayerController.CurentHP / 2 < healthSpritesDone )
            {
                // now, if the player's HP mod 2 isn't zero, we want to create half a heart
                // but, we only want to create half a heart once, so we check if we've done that already.
                if ( (player.PlayerController.CurentHP % 2 == 1) && (halfHeartCreated == false) )
                {
                    sprite.Sprite.SpriteSource = this.HalfHeartSprite;
                    halfHeartCreated = true;
                }
                // otherwise, if the HP mod 2 == 0, there only exists empty and full hearts.
                // thus, we create a whole heart
                else
                {
                    sprite.Sprite.SpriteSource = this.WholeHeartSprite;
                }
            }
            // if player's current HP div 2 is greater than the amount of healthsprites we've created,
            // that means that we need to start creating empty sprites.
            else
            {
                sprite.Sprite.SpriteSource = this.NoHeartSprite;
            }
        }
    }
    
    function AddHealth ( healthIncrement : Integer ) : Boolean
    {
        if ( healthIncrement % 2 == 0 )
        {
            for ( var h : Integer = 1; h <= healthIncrement / 2; ++h )
            {
                // create the sprite, then parent it to the HUD controller
                var healthSprite = this.Space.CreateAtPosition( this.HeartArchetype, Real3( 0, 0, 0 ) );
                healthSprite.AttachTo( this.Owner );

                healthSprite.Sprite.SpriteSource = this.NoHeartSprite;
                healthSprite.Sprite.Color = Real4( 1.0, 1.0, 1.0, 1.0 );
                
                // set the new position for the sprite
                healthSprite.Transform.Translation = this.HealthSpriteAnchor;
                // increment the X value of where we'll place the next sprite
                this.HealthSpriteAnchor.X += 0.75;
            }
            
            this.UpdateHealth( this.Space.FindObjectByName("Player") );
            // we succeded to add health
            return true;
        }
        else
        {
            // we failed at adding health
            return false;
        }
    }
    
    function UpdateAmmo ( newAmmo : Integer )
    {
        this.AmmoLabel.SpriteText.Text = "Ammo:  `newAmmo`";
    }
}
