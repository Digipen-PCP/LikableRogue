class EnemyMovement : ZilchComponent
{
    var Ang : Real = 0;
    var PlayerPosition : Cog = null;
    var MousePosition : Real3 = Real3(0,0,0);
    [Property]
    var MoveSpeed : Real = 1;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.PlayerPosition = this.Space.FindObjectByName("Player");
    }
    
    function UpdateFacingInput()
    {
        //North
        if (this.Ang>1&&this.Ang<2&&this.Ang!=0)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_enemyN");//Sets Sprite
                this.Owner.Sprite.FlipX=false;
            }
        //East
        if (this.Ang>-0.5&&this.Ang<0.5&&this.Ang!=0)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_enemyE");//Sets Sprite
                this.Owner.Sprite.FlipX=false;
            }
        //South
        if (this.Ang<-1&&this.Ang>-2&&this.Ang!=0)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_enemyS");//Sets Sprite
                this.Owner.Sprite.FlipX=false;
            }
        //West
        if (this.Ang<-2.6||this.Ang>2.6&&this.Ang!=0)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Find("basic_enemyE");//Sets Sprite
                this.Owner.Sprite.FlipX=true;
            }            
    }
     function UpdateMoveInput()
    {
        var moveVec =  Real3(this.PlayerPosition.Transform.Translation.X, this.PlayerPosition.Transform.Translation.Y, 0);
        //Console.WriteLine(moveVec);
        //clamp variables so that keyboard + gamepad input doesn't mess with our intended values of -1 to 1
        var x = Math.Clamp(moveVec.X,-1,1);
        var y = Math.Clamp(moveVec.Y,-1,1);
        moveVec = Real3(x,y,0);
        //call move function using the variables we made
        this.Move(moveVec);
    }
    
        function Move(moveR3 : Real3)
    {
        //Applies linear impulse based on movespeed and the given vector
        this.Owner.RigidBody.ApplyLinearImpulse(moveR3 * this.MoveSpeed);
        this.Owner.RigidBody.Velocity = Math.Normalize(this.Owner.RigidBody.Velocity);
    }
    
    function UpdatePlayerMovement()//Updates Ang based on Player location
    {
    this.MousePosition = Real3(this.PlayerPosition.Transform.Translation.X-this.Owner.Transform.Translation.X,//Get Mouse X relative to player
this.PlayerPosition.Transform.Translation.Y-this.Owner.Transform.Translation.Y,0);//Get Mouse Y relative to player
    this.Ang = Math.Angle2D(this.MousePosition);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.UpdateFacingInput();
        this.UpdateMoveInput();
        this.UpdatePlayerMovement();
    }
    
}
