class TextCrawlController : ZilchComponent
{
    // we need spritetext in order to work
    [Dependency]
    var SpriteText : SpriteText = null;
    [Dependency]
    var Area : Area = null;

    var GamePad : Gamepad = null;
    
    function Initialize(init : CogInitializer)
    {
        // initalize gamepad
        this.GamePad = Zero.Gamepads.GetGamePad(0);
        
        // reset parent text
        this.Owner.SpriteText.Text = "";
        
        // connect to update
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    // debugging
    var TutorialText : Cog = null;
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        // debugging
        this.TutorialText = this.Space.FindObjectByName( "TutorialHolder" );
        
        if ( this.GamePad.IsButtonPressed(0) || Zero.Keyboard.KeyIsPressed(Keys.Space) 
             || Zero.Keyboard.KeyIsPressed(Keys.Enter) || Zero.Mouse.IsButtonDown(MouseButtons.Left) )
        {
            //this.Owner.Parent.Destroy();
            var player = this.Space.FindObjectByName( "Player" );
            
            var seq = Action.Sequence( this.Owner.Actions );
            Action.Property( seq, @player.PlayerController.IsPlayerInDialog, false, 0.0, Ease.Linear );
            Action.Delay( seq, 0.15 );
            Action.Call( seq, this.Owner.Parent.Destroy );
        }
    }
    
    function CrawlText ( textToCrawl : String )
    {
        this.Owner.SpriteText.Text = "";
        
        var textSeq = Action.Sequence( this.Owner.Actions );
        
        var crawlTime : Real = 0.0;
        // create a delay for displaying the text - 0.1 seconds for every character
        foreach ( var char : Rune in textToCrawl )
        {
            crawlTime += 0.075;
        }
        
        Action.Delay( textSeq, 1.0 );
        Action.Property( textSeq, @this.Owner.SpriteText.Text, textToCrawl, crawlTime, Ease.Linear );
    }
}
