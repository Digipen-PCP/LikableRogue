/* 
 * TODO:
 *   - playerLoc returns funky results for rooms
 *     that are not the origin room. gotta figure 
 *     out how to fix that.
 *
 * NB: the door Real3() is based off of the Centering
 *     of the archetype, rather than the center of the world
 * 
*/

class DoorController : ZilchComponent
{
    [Property]
    var IsLocked : Boolean   = false;
    
    var MyLocation : Real3   = Real3(0, 0, 0);
    
    var ContainingRoom : Cog = null;
    
    var IsPlayerTouchingMe : Boolean = false;
    
    var PlayerCog : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        // initialize location for collision
        this.MyLocation = this.Owner.Transform.WorldTranslation;
        
        // initialize containing room
        this.ContainingRoom = this.Owner.Parent;
        
        // Connect to collision events
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);
        //Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
        
        // Connect to physics update
        //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnCollisionPersisted(event : CollisionEvent)
    {
        //debugging
        Console.WriteLine("`this.Owner.Name`\tcollided with\t`event.OtherObject.Name`");
        if (event.OtherObject.Name == "Player") 
        {
            // get the location of the player in order to calculate where he is
            // in relation to us.
            var playerLoc : Real3 = event.OtherObject.Transform.Translation;
            // get the value (-1, 1, or 0) depending on where the player is
            // in relation to us. 
            // (0, -1) is south of us
            // (0, 1)  is north
            // (-1, 0)  is west
            // (1, 0)   is east
            var xDifference : Real = Math.Round( (playerLoc.X - this.MyLocation.X), -1 );
            var yDifference : Real = Math.Round( (playerLoc.Y - this.MyLocation.Y), -1 );
            Console.WriteLine(xDifference);
            // debugging
            //Console.WriteLine( "Player location is: \t\t`xDifference`, `yDifference`" );
            
            // now some logic
            // if the player is going in a direction
            // and the player is _allowed_ to go in that direction
            // and the door _isn't_ locked
            // then translate the player to where he should go
            // old if ( (xDifference >= -0.1 && xDifference <= 0.1) && (yDifference >= -1.1 && yDifference <= -0.9)          // going north
            if(this.Owner.Name=="SouthDoor")
                {
                var toPutPlayer : Real3 = Real3( playerLoc.X, playerLoc.Y + ((this.MyLocation.Y - playerLoc.Y) * 2.75), 0 );
                event.OtherObject.Transform.Translation = toPutPlayer;
                }
            else if(this.Owner.Name=="NorthDoor")
                {
                var toPutPlayer : Real3 = Real3( playerLoc.X, playerLoc.Y + ((this.MyLocation.Y - playerLoc.Y) * 2.75), 0 );
                event.OtherObject.Transform.Translation = toPutPlayer;
                }
            else if(this.Owner.Name=="EastDoor")
                {
                var toPutPlayer : Real3 = Real3( playerLoc.X + ((this.MyLocation.X - playerLoc.X) * 2.75), playerLoc.Y, 0 );
                event.OtherObject.Transform.Translation = toPutPlayer;
                }
            else if(this.Owner.Name=="WestDoor")
                {
                var toPutPlayer : Real3 = Real3( playerLoc.X + ((this.MyLocation.X - playerLoc.X) * 2.75), playerLoc.Y, 0 );
                event.OtherObject.Transform.Translation = toPutPlayer;
                }
            /*
            if (((yDifference>0)&&Math.Abs(xDifference)<0.8)      // going south
                      && this.ContainingRoom.RoomController.SouthExit == true
                      && this.IsLocked == false) {
                var toPutPlayer : Real3 = Real3( playerLoc.X, playerLoc.Y + ((this.MyLocation.Y - playerLoc.Y) * 2.75), 0 );
                event.OtherObject.Transform.Translation = toPutPlayer;
                }
            else if(((yDifference < 0)) && this.ContainingRoom.RoomController.NorthExit == true
                 && this.IsLocked == false) {                
                // generate a real3 based off of the difference of our Y values
                // then, add that real3 to the player's Y location
                // then set the player's location to the new real3
                var toPutPlayer : Real3 = Real3( playerLoc.X, playerLoc.Y + ((this.MyLocation.Y - playerLoc.Y) * 2.75), 0 );
                event.OtherObject.Transform.Translation = toPutPlayer;
                }
            else if ( ((xDifference <0))     // going east
                      && this.ContainingRoom.RoomController.EastExit == true
                      && this.IsLocked == false) { 
                
                var toPutPlayer : Real3 = Real3( playerLoc.X + ((this.MyLocation.X - playerLoc.X) * 2.75), playerLoc.Y, 0 );
                event.OtherObject.Transform.Translation = toPutPlayer;
            }
            else if ((xDifference>0)      // going west
                      && this.ContainingRoom.RoomController.WestExit == true
                      && this.IsLocked == false) {
                var toPutPlayer : Real3 = Real3( playerLoc.X + ((this.MyLocation.X - playerLoc.X) * 2.75), playerLoc.Y, 0 );
                event.OtherObject.Transform.Translation = toPutPlayer;
            }
            else {                                              // error case
                return;
                //Console.WriteLine("I don't know where the player is going"); 
            }
            */
        }
    }

    /*
    function OnCollisionStarted(event : CollisionEvent)
    {
        if (event.OtherObject.Name == "Player") 
        {
            this.PlayerCog = event.OtherObject;
            this.IsPlayerTouchingMe = true;
        }
    }
    
    function OnCollisionEnded(event : CollisionEvent)
    {
        if (event.OtherObject.Name == "Player" )
        {
            this.IsPlayerTouchingMe = false;
            this.PlayerCog = null;
        }
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        
    }
    */
}
